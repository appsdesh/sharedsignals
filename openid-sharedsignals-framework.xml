<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY OASIS.saml-core-2.0-os SYSTEM "https://bib.ietf.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml">
<!ENTITY RFC2119 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5785 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY RFC6750 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC7159 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7517 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7519 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC8174 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8417 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8417.xml">
]>

<?rfc private="yes"?>

<rfc ipr="none" docName="openid-sharedsignals-framework-1_0" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SharedSignals">OpenID Shared Signals Framework - draft 03</title>

    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization>SGNL</organization>
      <address>
        <email>atul@sgnl.ai</email>
      </address>
    </author>
    <author initials="T." surname="Cappalli" fullname="Tim Cappalli">
      <organization>Microsoft</organization>
      <address>
        <email>tim.cappalli@microsoft.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Coinbase</organization>
      <address>
        <email>marius.scurtescu@coinbase.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
      <address>
        <email>secevemt@ve7jtb.com</email>
      </address>
    </author>
    <author initials="S." surname="Miel" fullname="Shayne Miel">
      <organization>Cisco</organization>
      <address>
        <email>smiel@cisco.com</email>
      </address>
    </author>

    <date year="2023" month="January" day="18"/>

    
    <workgroup>Shared Signals</workgroup>
    

    <abstract>


<t>This Shared Signals Framework enables sharing of signals and events
between cooperating peers. It enables multiple applications such as Risk Incident Sharing
and Coordination (RISC) and the Continuous Access Evaluation Profile ( <xref target="CAEP"/> )</t>

<t>This specification defines:</t>

<t><list style="symbols">
  <t>A profile for <xref target="RFC8417"/> (Security Event Tokens)</t>
  <t>Subject Principals</t>
  <t>A profile for <xref target="SUBIDS"/> (Subject Identifiers for Security Event Tokens)</t>
  <t>Configuration information and discovery method for Transmitters</t>
  <t>A Management API for Event Streams</t>
  <t>A profile for <xref target="DELIVERYPUSH"/> (Push-Based SET Token Delivery Using HTTP)</t>
  <t>A profile for <xref target="DELIVERYPOLL"/> (Poll-Based Security Event Token (SET) Delivery Using HTTP)</t>
  <t>Event Types</t>
  <t>Event Properties</t>
</list></t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>The OpenID Shared Signals Framework (SSF) defines how independent parties can:</t>

<t><list style="symbols">
  <t>Create streams of events between a Transmitter and a Receiver</t>
  <t>Describe the types of supported events and desired events</t>
  <t>Control the flow within a stream</t>
  <t>Asynchronously send and receive events</t>
  <t>Verify the liveness of a stream</t>
  <t>Describe the subject within an event</t>
  <t>Describe the format of events</t>
</list></t>

<t>The events in SSF streams are always Security Event Tokens (SETs) <xref target="RFC8417"/>,
and are delivered using HTTP PUSH <xref target="DELIVERYPUSH"/> or HTTP POLL <xref target="DELIVERYPOLL"/>
mechanisms</t>

<section anchor="notational-considerations"><name>Notational Considerations</name>

<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="subject-principals"><name>Subject Principals</name>

<t>This Shared Signals Framework specification defines a Subject Principal to be
the entities about which event can be sent by Transmitters and received by
Receivers using the Shared Signals Framework.</t>

<t>Subject Principals are the managed entities in a SSF Transmitter or Receiver.
These include human or robotic principals, devices, customer tenants in a
multi-tenanted service, organizational units within a tenant, groups of subject
principals, or other entities that are managed by Transmitters and Receivers.
There may be other actors or resources that can be treated as Subject
Principals, and event-type definitions SHOULD specify the range of principals
addressed by the event.</t>

<t>Subject Principals are identified by Subject Members defined below.</t>

</section>
<section anchor="subject-ids"><name>Subject Members in SSF Events</name>

<t>A member of type Subject in an SSF event MAY have any claim name. Each Subject Member MUST
refer to exactly one Subject Principal.</t>

<t>A Subject may be a <spanx style="verb">simple subject</spanx> or a <spanx style="verb">complex subject</spanx>.</t>

<section anchor="simple-subjects"><name>Simple Subject Members</name>

<t>A Simple Subject Member has a claim name and a value that is a <spanx style="verb">Subject
Identifier</spanx> as defined in the Subject Identifiers for Security Event Tokens
<xref target="SUBIDS"/>. Below is a non-normative example of a Simple Subject Member in a SSF
event.</t>

<figure title="Example: Simple Subject" anchor="simple-subject-ex"><sourcecode type="json"><![CDATA[
"transferer": {
  "format": "email",
  "email": "foo@example.com"
}
]]></sourcecode></figure>

</section>
<section anchor="complex-subjects"><name>Complex Subject Members</name>

<t>A Complex Subject Member has a name and a value that is a JSON <xref target="RFC7159"/>
object that has one or more Simple Subject Members. The name of each Simple
Subject Member in this value MAY be one of the following:</t>

<dl>
  <dt>user</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a user.</t>
  </dd>
  <dt>device</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a device.</t>
  </dd>
  <dt>session</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a session.</t>
  </dd>
  <dt>application</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies an application.</t>
  </dd>
  <dt>tenant</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a tenant.</t>
  </dd>
  <dt>org_unit</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies an organizational unit.</t>
  </dd>
  <dt>group</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a group.</t>
  </dd>
</dl>

<t>Additional Subject Member names MAY be used in Complex Subjects. Each member name MAY
appear at most once in the Complex Subject value.</t>

<t>Below is a non-normative example of a Complex Subject claim in a SSF event.</t>

<figure title="Example: Complex Subject" anchor="complex-subject-ex"><sourcecode type="json"><![CDATA[
"transferee": {
  "user" : {
    "format": "email",
    "email": "bar@example.com"
  },
  "tenant" : {
    "format": "iss_sub",
    "iss" : "http://example.com/idp1",
    "sub" : "1234"
  }
}
]]></sourcecode></figure>

<section anchor="complex-subject-interpretation"><name>Complex Subject Interpretation</name>

<t>All members within a Complex Subject MUST represent attributes of the same
Subject Principal. As a whole, the Complex Subject MUST refer to exactly one
Subject Principal.</t>

</section>
</section>
<section anchor="subject-ids-in-ssf"><name>Subject Identifiers in SSF Events</name>

<t>A Subject Identifier in a SSF event MUST have an identifier format that is any
one of:</t>

<t><list style="symbols">
  <t>Defined in the IANA Registry defined in Subject Identifiers for Security
Event Tokens <xref target="SUBIDS"/></t>
  <t>An identifier format defined in the Additional Subject Identifier Formats
<xref target="additional-subject-id-formats"/> section below, OR</t>
  <t>A proprietary subject identifier format that is agreed to between parties.
Members within a subject identifier that has a proprietary subject identifier
format are agreed to between the parties and such agreement is outside the
scope of this specification.</t>
</list></t>

</section>
<section anchor="additional-subject-id-formats"><name>Additional Subject Identifier Formats</name>

<t>The following new subject identifier formats are defined:</t>

<section anchor="sub-id-jwt-id"><name>JWT ID Subject Identifier Format</name>

<t>The &quot;JWT ID&quot; Subject Identifier Format specifies a JSON Web Token (JWT)
identifier, defined in  <xref target="RFC7519"/>. Subject Identifiers of this type MUST
contain the following members:</t>

<dl>
  <dt>iss</dt>
  <dd>
    <t>REQUIRED, the &quot;iss&quot; (issuer) claim of the JWT being identified, defined in
<xref target="RFC7519"/></t>
  </dd>
  <dt>jti</dt>
  <dd>
    <t>REQUIRED, the &quot;jti&quot; (JWT token ID) claim of the JWT being identified, defined
in <xref target="RFC7519"/></t>
  </dd>
</dl>

<t>The &quot;JWT ID&quot; Subject Identifier Format is identified by the name <spanx style="verb">jwt-id</spanx></t>

<t>Below is a non-normative example of Subject Identifier for the <spanx style="verb">jwt-id</spanx> Subject
Identifier Format.</t>

<figure title="Example: 'jwt-id' Subject Identifier" anchor="sub-id-jwtid"><sourcecode type="json"><![CDATA[
{
    "format": "jwt-id",
    "iss": "https://idp.example.com/123456789/",
    "jti": "B70BA622-9515-4353-A866-823539EECBC8"
}
]]></sourcecode></figure>

</section>
<section anchor="sub-id-saml-assertion-id"><name>SAML Assertion ID Subject Identifier Format</name>

<t>The &quot;SAML Assertion ID&quot; Subject Identifier Format specifies a SAML 2.0
<xref target="OASIS.saml-core-2.0-os"/> assertion identifier. Subject Identifiers of this
format MUST contain the following members:</t>

<dl>
  <dt>issuer</dt>
  <dd>
    <t>REQUIRED, the &quot;Issuer&quot; value of the SAML assertion being identified, defined
in <xref target="OASIS.saml-core-2.0-os"/></t>
  </dd>
  <dt>assertion_id</dt>
  <dd>
    <t>REQUIRED. The &quot;ID&quot; value of the SAML assertion being identified, defined in
<xref target="OASIS.saml-core-2.0-os"/></t>
  </dd>
</dl>

<t>The &quot;SAML Assertion ID&quot; Subject Identifier Format is identified by the name
<spanx style="verb">saml_assertion_id</spanx></t>

<t>Below is a non-normative example Subject Identifier for the <spanx style="verb">saml_assertion_id</spanx>
Subject Identifier Format.</t>

<figure title="Example: 'saml_assertion_id' Subject Identifier" anchor="sub-id-samlassertionid"><sourcecode type="json"><![CDATA[
{
    "format": "saml_assertion_id",
    "issuer": "https://idp.example.com/123456789/",
    "assertion_id": "_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6"
}

]]></sourcecode></figure>

</section>
</section>
<section anchor="receiver-subject-processing"><name>Receiver Subject Processing</name>

<t>A SSF Receiver MUST make a best effort to process all members from a Subject in
an SSF event. The Transmitter Configuration Metadata <xref target="discovery-meta"/> defined
below MAY define certain members within a Complex Subject to be Critical. A SSF
Receiver MUST discard any event that contains a Subject with a Critical member
that it is unable to process.</t>

</section>
</section>
<section anchor="properties"><name>Event Properties</name>

<t>Additional members about an event may be included in the <spanx style="verb">events</spanx> claim. Some
of these members are required and specified as such in the respective event
types specs. If a Transmitter determines that it needs to include additional
members that are not specified in the event types spec, then the name of such
members MUST be a URI. The discoverability of all additional members is 
specified in the Discovery <xref target="discovery"/> section.</t>

</section>
<section anchor="events-examples"><name>Example SETs that conform to the Shared Signals framework</name>

<t>The following are hypothetical examples of SETs that conform to the Shared
Signals framework.</t>

<figure title="Example: SET Containing a SSF Event with a Simple Subject Member" anchor="subject-ids-ex-simple"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/risc/event-type/account-enabled": {
      "subject": {
        "format": "email",
        "email": "foo@example.com"
      }
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a SSF Event with a Complex Subject Member" anchor="subject-ids-ex-complex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/session-revoked": {
      "subject": {
          "user": {
              "format": "iss_sub",
              "iss": "https://idp.example.com/3957ea72-1b66-44d6-a044-d805712b9288/",
              "sub": "jane.smith@example.com"
          },
          "device": {
              "format": "iss_sub",
              "iss": "https://idp.example.com/3957ea72-1b66-44d6-a044-d805712b9288/",
              "sub": "e9297990-14d2-42ec-a4a9-4036db86509a"
          }
      },
      "initiating_entity": "policy",
      "reason_admin": "Policy Violation: C076E82F",
      "reason_user": "Landspeed violation.",
      "event_timestamp": 1600975810
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a SSF Event with a Simple Subject and a Property Member" anchor="subject-properties-ex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://sp.example2.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
      "subject": {
        "format": "email",
        "email": "foo@example2.com"
      },
      "event_timestamp": 1600975810,
      "claims": {
         "role": "ro-admin"
      }
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a SSF Event with a Proprietary Subject Identifier Format" anchor="subject-custom-type-ex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://myservice.example3.com/",
  "jti": "756E69717565206964656E746966696534",
  "iat": 15203800012,
  "aud": "636C69656E745F6324",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
    "subject": {
        "format": "catalog_item",
        "catalog_id": "c0384/winter/2354122"
      },
      "event_timestamp": 1600975810,
      "claims": {
         "role": "ro-admin"
      }
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="discovery"><name>Transmitter Configuration Discovery</name>

<t>This section defines a mechanism for Receivers to obtain Transmitter
configuration information.</t>

<section anchor="discovery-meta"><name>Transmitter Configuration Metadata</name>

<t>Transmitters have metadata describing their configuration:</t>

<dl>
  <dt>issuer</dt>
  <dd>
    <t>REQUIRED, the URL using the https scheme with no query or fragment component
that the Transmitter asserts as its Issuer Identifier. This MUST be identical
to the iss claim value in Security Event Tokens issued from this Transmitter.</t>
  </dd>
  <dt>jwks_uri</dt>
  <dd>
    <t>REQUIRED, the URL of the Transmitter&#39;s JSON Web Key Set <xref target="RFC7517"/> document.
This contains the signing key(s) the Receiver uses to validate signatures from
the Transmitter.</t>
  </dd>
  <dt>delivery_methods_supported</dt>
  <dd>
    <t>RECOMMENDED, a list of supported delivery method URIs.</t>
  </dd>
  <dt>configuration_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Configuration Endpoint.</t>
  </dd>
  <dt>status_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Status Endpoint.</t>
  </dd>
  <dt>add_subject_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Add Subject Endpoint.</t>
  </dd>
  <dt>remove_subject_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Remove Subject Endpoint.</t>
  </dd>
  <dt>verification_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Verification Endpoint.</t>
  </dd>
  <dt>critical_subject_members</dt>
  <dd>
    <t>OPTIONAL, the list of member names in a Complex Subject which, if present in
a Subject Member in an event, MUST be interpreted by a Receiver.</t>
  </dd>
</dl>

<t>TODO: consider adding a IANA Registry for metadata, similar to Section 7.1.1 of
<xref target="OAUTH-DISCOVERY"/>. This would allow other specs to add to the metadata.</t>

</section>
<section anchor="obtaining-transmitter-configuration-information"><name>Obtaining Transmitter Configuration Information</name>

<t>Using the Issuer as documented by the Transmitter, the Transmitter Configuration
Information can be retrieved.</t>

<t>Transmitters supporting Discovery MUST make a JSON document available at the
path formed by inserting the string <spanx style="verb">/.well-known/ssf-configuration</spanx> into the
Issuer between the host component and the path component, if any. The syntax
and semantics of <spanx style="verb">.well-known</spanx> are defined in <xref target="RFC5785"/>.  <spanx style="verb">ssf-configuration</spanx>
MUST point to a JSON document compliant with this specification and MUST be
returned using the <spanx style="verb">application/json</spanx> content type.</t>

<section anchor="transmitter-configuration-request"><name>Transmitter Configuration Request</name>

<t>A Transmitter Configuration Document MUST be queried using an HTTP <spanx style="verb">GET</spanx> request
at the previously specified path.</t>

<t>The Receiver would make the following request to the Issuer
<spanx style="verb">https://tr.example.com</spanx> to obtain its Configuration information, since the
Issuer contains no path component:</t>

<figure title="Example: Transmitter Configuration Request (without path)" anchor="figdiscoveryrequest"><sourcecode type="http"><![CDATA[
GET /.well-known/ssf-configuration HTTP/1.1
Host: tr.example.com
]]></sourcecode></figure>

<t>If the  Issuer value contains a path component, any terminating <spanx style="verb">/</spanx> MUST be
removed before inserting <spanx style="verb">/.well-known/ssf-configuration</spanx> between the host
component and the path component. The Receiver would make the following request
to the Issuer <spanx style="verb">https://tr.example.com/issuer1</spanx> to obtain its Configuration
information, since the Issuer contains a path component:</t>

<figure title="Example: Transmitter Configuration Request (with path)" anchor="figdiscoveryrequestpath"><sourcecode type="http"><![CDATA[
GET /.well-known/ssf-configuration/issuer1 HTTP/1.1
Host: tr.example.com
]]></sourcecode></figure>

<t>Using path components enables supporting multiple issuers per host. This is
required in some multi-tenant hosting configurations. This use of <spanx style="verb">.well-known</spanx>
is for supporting multiple issuers per host; unlike its use in <xref target="RFC5785"/>, it
does not provide general information about the host.</t>

</section>
<section anchor="backward-compatibility-for-risc-transmitters"><name>Backward Compatibility for RISC Transmitters</name>
<t>Existing RISC Transmitters MAY continue to use the path component
<spanx style="verb">/risc-configuration</spanx> instead of the path component <spanx style="verb">/ssf-configuration</spanx> in the
path for the Transmitter Configuration Metadata. New services supporting the
Shared Signals Framework SHOULD NOT use this location for publishing the
Transmitter Configuration Metadata. For example, the Transmitter Configuration
Metadata for the Transmitter <spanx style="verb">https://risc-tr.example.com</spanx> MAY be obtained by
making the following request:</t>

<figure title="Example: Transmitter Configuration Request for RISC Transmitters" anchor="figolddiscoveryrequest"><sourcecode type="http"><![CDATA[
GET /.well-known/risc-configuration HTTP/1.1
Host: risc-tr.example.com
]]></sourcecode></figure>

</section>
<section anchor="transmitter-configuration-response"><name>Transmitter Configuration Response</name>
<t>The response is a set of Claims about the Transmitter&#39;s configuration, including
all necessary endpoints and public key location information. A successful
response MUST use the 200 OK HTTP status code and return a JSON object using the
<spanx style="verb">application/json</spanx> content type that contains a set of Claims as its members
that are a subset of the Metadata values defined in <xref target="discovery-meta"/>. Other
Claims MAY also be returned.</t>

<t>Claims that return multiple values are represented as JSON arrays. Claims with
zero elements MUST be omitted from the response.</t>

<t>An error response uses the applicable HTTP status code value.</t>

<figure title="Example: Transmitter Configuration Response" anchor="figdiscoveryresponse"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "issuer":
    "https://tr.example.com",
  "jwks_uri":
    "https://tr.example.com/jwks.json",
  "delivery_methods_supported": [
    "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "https://schemas.openid.net/secevent/risc/delivery-method/poll"],
  "configuration_endpoint":
    "https://tr.example.com/sse/mgmt/stream",
  "status_endpoint":
    "https://tr.example.com/sse/mgmt/status",
  "add_subject_endpoint":
    "https://tr.example.com/sse/mgmt/subject:add",
  "remove_subject_endpoint":
    "https://tr.example.com/sse/mgmt/subject:remove",
  "verification_endpoint":
    "https://tr.example.com/sse/mgmt/verification",
  "critical_subject_members": [ "tenant", "user" ]
}
]]></sourcecode></figure>

</section>
<section anchor="transmitter-configuration-validation"><name>Transmitter Configuration Validation</name>
<t>If any of the validation procedures defined in this specification fail, any
operations requiring the information that failed to correctly validate MUST be
aborted and the information that failed to validate MUST NOT be used.</t>

<t>The <spanx style="verb">issuer</spanx> value returned MUST be identical to the Issuer URL that was
directly used to retrieve the configuration information. This MUST also be
identical to the <spanx style="verb">iss</spanx> Claim value in Security Event Tokens issued from this
Transmitter.</t>

</section>
</section>
</section>
<section anchor="management"><name>Management API for SET Event Streams</name>
<t>An Event Stream is an abstraction for how events are communicated from a
Transmitter to a Receiver. The Event Stream&#39;s configuration, which is jointly
managed by the Transmitter and Receiver, holds information about
what types of events will be sent from the Transmitter, as well as the mechanism by
which the Receiver can expect to receive the events. The Event Stream also keeps
track of what Subjects are of interest to the Receiver, and only events with those
Subjects are transmitted on the stream.</t>

<t>This section defines an HTTP API to be implemented by Event Transmitters
which can be used by Event Receivers to create and delete one or more Event Streams.
The API can also be used to query and update the Event Stream&#39;s configuration and status,
add and remove Subjects, and trigger verification for those streams.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Stream Updated |            |
|            +---------------->            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>It is OPTIONAL for Transmitters to implement a Management API, but it is
RECOMMENDED that they implement it, especially the endpoints for querying the
Stream Status and for triggering Verification.</t>

<section anchor="management-api"><name>Event Stream Management</name>
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>A Transmitter and Receiver MAY use the same Event Stream for updates about
multiple Subject Principals. The status of the Event Stream MAY be queried
and managed independently for each Subject Principal by Transmitters and
Receivers.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<dl>
  <dt>Configuration Endpoint</dt>
  <dd>
    <t>An endpoint used to create and delete Event Streams, as well as read and
update an Event Stream&#39;s current configuration.</t>
  </dd>
  <dt>Status Endpoint</dt>
  <dd>
    <t>An endpoint used to read and update an Event Stream&#39;s current status.</t>
  </dd>
  <dt>Add Subject Endpoint</dt>
  <dd>
    <t>An endpoint used to add subjects to an Event Stream.</t>
  </dd>
  <dt>Remove Subject Endpoint</dt>
  <dd>
    <t>An endpoint used to remove subjects from an Event Stream.</t>
  </dd>
  <dt>Verification Endpoint</dt>
  <dd>
    <t>An endpoint used to request the Event Transmitter transmit a Verification
Event over an Event Stream.</t>
  </dd>
</dl>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple Event
Receivers, provided that the Event Transmitter has some mechanism through which
they can identify the applicable set of Event Streams for any given request,
e.g. from authentication credentials. The definition of such mechanisms is
outside the scope of this specification.</t>

<section anchor="stream-config"><name>Stream Configuration</name>
<t>An Event Stream&#39;s configuration is a collection of data, provided by both the
Transmitter and the Receiver, that describes the information being sent over
the Event Stream. It is represented as a JSON <xref target="RFC7159"/> object with the
following properties:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, A string that uniquely identifies the stream. Stream
IDs MUST be unique per Reciever.  This value is generated by the Transmitter
when the stream is created.</t>
  </dd>
  <dt>iss</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, A URL using the https scheme with no query or
fragment component that the Transmitter asserts as its Issuer Identifier. This
MUST be identical to the <spanx style="verb">iss</spanx> Claim value in Security Event Tokens issued
from this Transmitter.</t>
  </dd>
  <dt>aud</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, A string or an array of strings containing an
audience claim as defined in JSON Web Token (JWT)<xref target="RFC7519"/> that identifies
the Event Receiver(s) for the Event Stream. This property cannot be updated.
If multiple Receivers are specified then the Transmitter SHOULD know that
these Receivers are the same entity.</t>
  </dd>
  <dt>events_supported</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, An array of URIs identifying the set of events
supported by the Transmitter for this Receiver. If omitted, Event Transmitters
SHOULD make this set available to the Event Receiver via some other means
(e.g. publishing it in online documentation).</t>
  </dd>
  <dt>events_requested</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, An array of URIs identifying the set of events that
the Receiver requested. A Receiver SHOULD request only the events that it
understands and it can act on. This is configurable by the Receiver.</t>
  </dd>
  <dt>events_delivered</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, An array of URIs which is the intersection of
<spanx style="verb">events_supported</spanx> and <spanx style="verb">events_requested</spanx>. These events MAY be delivered over
            the Event Stream.</t>
  </dd>
  <dt>delivery</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, A JSON object containing a set of name/value pairs
specifying configuration parameters for the SET delivery method.  The actual
delivery method is identified by the special key <spanx style="verb">method</spanx> with the value being
a URI as defined in <xref target="delivery-meta"/>.</t>
  </dd>
  <dt>min_verification_interval</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, An integer indicating the minimum amount of time in
seconds that must pass in between verification requests. If an Event Receiver
submits verification requests more frequently than this, the Event Transmitter
MAY respond with a 429 status code. An Event Transmitter SHOULD NOT respond
with a 429 status code if an Event Receiver is not exceeding this frequency.</t>
  </dd>
  <dt>format</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, The Subject Identifier Format that the Receiver wants
for the events. If not set then the Transmitter might decide to use a type
that discloses more information than necessary.</t>
  </dd>
</dl>

<t>TODO: consider adding a IANA Registry for stream configuration metadata, similar
to Section 7.1.1 of <xref target="OAUTH-DISCOVERY"/>. This would allow other specs to add to
the stream configuration.</t>

<section anchor="creating-a-stream"><name>Creating a Stream</name>
<t>In order to communicate events from a Transmitter to a Receiver, a Receiver
MUST first create an Event Stream. An Event Receiver creates a stream by making
an HTTP POST request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a <spanx style="verb">201 Created</spanx> response containing a
<xref target="RFC7159">JSON</xref> representation of the stream&#39;s configuration in the body.</t>

<t>The HTTP POST request MAY contain the Receiver-Supplied values of the Stream
Configuration<xref target="stream-config"/> object:</t>

<dl>
  <dt>events_requested</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, An array of URIs identifying the set of events that
the Receiver requested. A Receiver SHOULD request only the events that it
understands and it can act on. This is configurable by the Receiver.</t>
  </dd>
  <dt>delivery</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, A JSON object containing a set of name/value pairs
specifying configuration parameters for the SET delivery method. The actual
delivery method is identified by the special key <spanx style="verb">method</spanx> with the value
being a URI as defined in <xref target="delivery-meta"/>.</t>
  </dd>
  <dt>format</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, The Subject Identifier Format that the Receiver wants
for the events. If not set then the Transmitter might decide to use a type
that discloses more information than necessary.</t>
  </dd>
</dl>

<t>The following is a non-normative example request to create an Event Stream:</t>

<figure title="Example: Create Event Stream Request" anchor="figcreatestreamreq"><sourcecode type="http"><![CDATA[
POST /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
  },
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ]
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Create Stream Response" anchor="figcreatestreamresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
      "http://receiver.example.com/web",
      "http://receiver.example.com/mobile"
    ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Create Stream Errors" anchor="tablecreatestream">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>If the request cannot be parsed</c>
      <c>401</c>
      <c>If authorization failed or it is missing</c>
      <c>403</c>
      <c>If the Event Receiver is not allowed to create a stream</c>
</texttable>

</section>
<section anchor="reading-a-streams-configuration"><name>Reading a Stream&#39;s Configuration</name>
<t>An Event Receiver gets the current configuration of a stream by making an HTTP
GET request to the Configuration Endpoint. On receiving a valid request the
Event Transmitter responds with a <spanx style="verb">200 OK</spanx> response containing a <xref target="RFC7159">JSON</xref>
representation of the stream&#39;s configuration in the body.</t>

<t>The GET request MAY include the &quot;stream_id&quot; as a parameter in order to
identify the correct Event Stream. If the &quot;stream_id&quot; argument is missing,
then the Transmitter MUST return a list of the stream configurations available
to this Receiver. In the event that there are no Event Streams created, the
Transmitter MUST return an empty list.</t>

<t>The following is a non-normative example request to read an Event Stream&#39;s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><sourcecode type="http"><![CDATA[
GET /sse/stream?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
      "http://receiver.example.com/web",
      "http://receiver.example.com/mobile"
    ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>The following is a non-normative example request to read an Event Stream&#39;s
configuration, with no &quot;stream_id&quot; indicated:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreqnostreamid"><sourcecode type="http"><![CDATA[
GET /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no &quot;stream_id&quot;:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigrespnostreamidmanystreams"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[
  {
    "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
    "iss": "https://tr.example.com",
    "aud": [
        "http://receiver.example.com/web",
        "http://receiver.example.com/mobile"
      ],
    "delivery": {
      "delivery_method":
        "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  },
  {
    "stream_id": "50b2d39934264897902c0581ba7c21a3",
    "iss": "https://tr.example.com",
    "aud": [
        "http://receiver.example.com/web",
        "http://receiver.example.com/mobile"
      ],
    "delivery": {
      "delivery_method":
        "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  }
]
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no
&quot;stream_id&quot; when there is only one Event Stream configured:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigrespnostreamidonestream"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[
  {
    "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
    "iss": "https://tr.example.com",
    "aud": [
        "http://receiver.example.com/web",
        "http://receiver.example.com/mobile"
      ],
    "delivery": {
      "delivery_method":
        "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  }
]
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no &quot;stream_id&quot;
when there are no Event Streams configured:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigrespnostreamidnostreams"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[]
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration"><name>Updating a Stream&#39;s Configuration</name>
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP PATCH request to the Configuration Endpoint. The PATCH body contains a
<xref target="RFC7159">JSON</xref> representation of the stream configuration properties to change. On
receiving a valid request the Event Transmitter responds with a <spanx style="verb">200 OK</spanx>
response containing a <xref target="RFC7159">JSON</xref> representation of the entire updated stream
configuration in the body.</t>

<t>The stream_id property MUST be present in the request. Other properties
MAY be present in the request. Any Receiver-Supplied property present in the
request MUST be updated by the Transmitter. Any properties missing in the
request MUST NOT be changed by the Transmitter.</t>

<t>Transmitter-Supplied properties beside the stream_id MAY be present,
but they MUST match the expected value. Missing Transmitter-Supplied
properties will be ignored by the Transmitter.</t>

<t>The following is a non-normative example request to replace an Event Stream&#39;s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><sourcecode type="http"><![CDATA[
PATCH /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "http://receiver.example.com/web",
    "http://receiver.example.com/mobile"
  ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>Pending conditions or errors are signaled with HTTP status codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed, a Transmitter-Supplied property is incorrect, or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="replacing-a-streams-configuration"><name>Replacing a Stream&#39;s Configuration</name>
<t>An Event Receiver replaces the current configuration of a stream by making an
HTTP PUT request to the Configuration Endpoint. The PUT body contains a JSON
<xref target="RFC7159"/> representation of the new configuration. On receiving a valid
request the Event Transmitter responds with a <spanx style="verb">200 OK</spanx> response containing a
JSON <xref target="RFC7159"/> representation of the updated stream configuration in the body.</t>

<t>The stream_id and the full set of Receiver-Supplied properties MUST be present
in the PUT body, not only the ones that are specifically intended to be changed.
Missing Receiver-Supplied properties MUST be interpreted as requested to be
deleted. Event Receivers MAY read the configuration first, modify the JSON
<xref target="RFC7159"/> representation, then make a replacement request.</t>

<t>Transmitter-Supplied properties besides the stream_id MAY be present,
but they MUST match the expected value. Missing Transmitter-Supplied
properties will be ignored by the Transmitter.</t>

<t>The following is a non-normative example request to replace an Event Stream&#39;s
configuration:</t>

<figure title="Example: Replace Stream Configuration Request" anchor="figreplaceconfigreq"><sourcecode type="http"><![CDATA[
PUT /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "http://receiver.example.com/web",
    "http://receiver.example.com/mobile"
  ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Replace Stream Configuration Response" anchor="figreplaceconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "http://receiver.example.com/web",
    "http://receiver.example.com/mobile"
  ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>Pending conditions or errors are signaled with HTTP status codes as follows:</t>

<texttable title="Replace Stream Configuration Errors" anchor="tabreplaceconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the replace request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed, a Transmitter-Supplied property is incorrect, or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to replace the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="deleting-a-stream"><name>Deleting a Stream</name>
<t>An Event Receiver deletes a stream by making an HTTP DELETE request to the
Configuration Endpoint. On receiving a request the Event Transmitter responds
with an empty <spanx style="verb">204 OK</spanx> response if the configuration was successfully removed.</t>

<t>The DELETE request MUST include the &quot;stream_id&quot; as a parameter in order to
identify the correct Event Stream.</t>

<t>The following is a non-normative example request to delete an Event Stream:</t>

<figure title="Example: Delete Stream Request" anchor="figdeletestreamreq"><sourcecode type="http"><![CDATA[
DELETE /sse/stream?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Delete Stream Errors">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to delete the stream</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
</section>
<section anchor="status"><name>Stream Status</name>
<t>Within an Event Stream, events related to different Subject Principals MAY be
managed independently. A Receiver MAY request Subject Principals to be added to
or removed from a stream by <xref target="updating-a-streams-status"/> and specifying the
Subject in the request.</t>

<t>A Transmitter MAY decide to enable, pause or disable updates about a Subject
independently of an update request from a Receiver. If a Transmitter decides to
start or stop events for a Subject then the Transmitter MUST do the following
according to the status of the stream.</t>

<t>If the stream is:</t>

<dl>
  <dt>Enabled</dt>
  <dd>
    <t>the Transmitter MUST send a <xref target="stream-updated-event"/> event respectively to the
Receiver within the Event Stream.</t>
  </dd>
  <dt>Paused</dt>
  <dd>
    <t>the Transmitter SHOULD send <xref target="stream-updated-event"/> after the Event Stream is
re-started. A Receiver MUST assume that events may have been lost during the
time when the event stream was paused.</t>
  </dd>
  <dt>Disabled</dt>
  <dd>
    <t>the Transmitter MAY send <xref target="stream-updated-event"/> after the Event Stream is
re-enabled.</t>
  </dd>
</dl>

<section anchor="reading-a-streams-status"><name>Reading a Stream&#39;s Status</name>
<t>An Event Receiver checks the current status of an event stream by making an HTTP
GET request to the stream&#39;s Status Endpoint.</t>

<t>The Stream Status method takes the following parameters:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream whose status is being queried.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>OPTIONAL. The subject for which the stream status is requested.</t>
  </dd>
</dl>

<t>On receiving a valid request the Event Transmitter responds with a 200 OK
response containing a <xref target="RFC7159">JSON</xref> object with an attribute<spanx style="verb">status</spanx>,
whose string value MUST have one of the following values:</t>

<dl>
  <dt>enabled</dt>
  <dd>
    <t>The Transmitter MUST transmit events over the stream, according to the
stream&#39;s configured delivery method.</t>
  </dd>
  <dt>paused</dt>
  <dd>
    <t>The Transmitter MUST NOT transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and SHOULD
transmit them when the stream&#39;s status becomes <spanx style="verb">enabled</spanx>. If a Transmitter
holds successive events that affect the same Subject Principal, then the
Transmitter MUST make sure that those events are transmitted in the order of
time that they were generated OR the Transmitter MUST send only the last events
that do not require the previous events affecting the same Subject Principal to
be processed by the Receiver, because the previous events are either cancelled
by the later events or the previous events are outdated.</t>
  </dd>
  <dt>disabled</dt>
  <dd>
    <t>The Transmitter MUST NOT transmit events over the stream, and will not hold
any events for later transmission.</t>
  </dd>
</dl>

<t>The following is a non-normative example request to check an event stream&#39;s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><sourcecode type="http"><![CDATA[
GET /sse/status?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer zzzz
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "status": "enabled"
}
]]></sourcecode></figure>

<t>The following is a non-normative example request to check an event stream&#39;s
status for a specific subject:</t>

<figure title="Example: Check Stream Status Request with Subject" anchor="figstatuswithsubjectreq"><sourcecode type="http"><![CDATA[
GET /sse/status?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f&subject=<url-encoded-subject> HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response with a Subject claim:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatuswithsubjectresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "status": "enabled",
  "subject": {
    "tenant" : {
      "format" : "iss_sub",
      "iss" : "http://example.com/idp1",
      "sub" : "1234"
    }
  }
}
]]></artwork></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Read Stream Status Errors" anchor="tabreadstatus">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream status</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the Subject specified is invalid or if the Receiver is not authorized to get status for the specified Subject.</c>
</texttable>

<t>Examples:</t>

<t><list style="numbers">
  <t>If a Receiver makes a request with an invalid OAuth token, then the
Transmitter MUST respond with a 401 error status.</t>
  <t>If the Receiver presents a valid OAuth token, but the Transmitter policy
does not permit the Receiver from obtaining the status, then the Transmitter
MAY respond with a 403 error status.</t>
  <t>If the Receiver requests the status for a stream that does not exist then the
Transmitter MUST respond with a 404 error status.</t>
  <t>If the Receiver requests the status for a specific Subject, but the
Transmitter policy does not permit the Receiver to read the status of that
Subject, then the Transmitter MAY respond with a 404 error status in order
to not reveal the policy decision.</t>
  <t>If the specified Subject is invalid then the Transmitter MUST respond with a
404 error status.</t>
</list></t>

</section>
<section anchor="updating-a-streams-status"><name>Updating a Stream&#39;s Status</name>
<t>An Event Receiver updates the current status of a stream by making an HTTP POST
request to the Status Endpoint. The POST body contains a <xref target="RFC7159">JSON</xref> object
with the following fields:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream whose status is being updated.</t>
  </dd>
  <dt>status</dt>
  <dd>
    <t>REQUIRED. The new status of the Event Stream.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>OPTIONAL. The Subject to which the new status applies.</t>
  </dd>
  <dt>reason</dt>
  <dd>
    <t>OPTIONAL. A short text description that explains the reason for the change.</t>
  </dd>
</dl>

<t>On receiving a valid request the Event Transmitter responds with a <spanx style="verb">200 OK</spanx>
response containing a <xref target="RFC7159">JSON</xref> representation of the updated stream
status in the body.</t>

<t>The following is a non-normative example request to update an Event Stream&#39;s
status:</t>

<figure title="Example: Update Stream Status Request Without Optional Fields" anchor="figupdatestatusreq"><sourcecode type="http"><![CDATA[
POST /sse/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of an Update Stream Status request with
optional fields:</t>

<figure title="Example: Update Stream Status Request With Optional Fields" anchor="figupdatestatuswithsubjectreq"><sourcecode type="http"><![CDATA[
POST /sse/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "subject": {
    "tenant" : {
      "format" : "iss_sub",
      "iss" : "http://example.com/idp1",
      "sub" : "1234"
    }
  },
  "reason": "Disabled by administrator action."
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Status Response" anchor="figupdatestatusresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "subject": {
    "format" : "email",
    "email" : "user@example.com"
  }
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Update Stream Status Errors" anchor="tabupdatestatus">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream status</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if an invalid Subject is specified.</c>
</texttable>

<t>Example:</t>

<t><list style="numbers">
  <t>If a Receiver makes a request to update a stream to enable it for a specific
Subject, and the Transmitter is unable to decide whether or not to complete
the request, then the Transmitter MUST respond with a 202 status code.</t>
</list></t>

</section>
</section>
<section anchor="subjects"><name>Subjects</name>
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by &quot;adding&quot; or
&quot;removing&quot; that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream"><name>Adding a Subject to a Stream</name>
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a JSON object the
following claims:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream to which the subject is being added.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>REQUIRED. A Subject claim identifying the subject to be added.</t>
  </dd>
  <dt>verified</dt>
  <dd>
    <t>OPTIONAL.  A boolean value; when true, it indicates that the Event Receiver
has verified the Subject claim. When false, it indicates that the Event
Receiver has not verified the Subject claim. If omitted, Event Transmitters
SHOULD assume that the subject has been verified.</t>
  </dd>
</dl>

<t>On a successful response, the Event Transmitter responds with an empty <spanx style="verb">200 OK</spanx>
response.  The Event Transmitter MAY choose to silently ignore the request, for
example if the subject has previously indicated to the Transmitter that they do
not want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty <spanx style="verb">200 OK</spanx> response or an appropriate error code.
See Security Considerations <xref target="management-sec"/>.</t>

<t>The following is a non-normative example request to add a subject to a stream,
where the subject is identified by an Email Subject Identifier.</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><sourcecode type="http"><![CDATA[
POST /sse/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "subject": {
    "format": "email",
    "email": "example.user@example.com"
  },
  "verified": true
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject, or not allowed to add in general</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the subject is not recognized by the Event Transmitter. The Event Transmitter may choose to stay silent in this second case and respond with <spanx style="verb">200</spanx></c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time</c>
</texttable>

</section>
<section anchor="removing-a-subject"><name>Removing a Subject</name>
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP POST
request to the Remove Subject Endpoint, containing in the body a JSON object
with the following claims:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream from which the subject is being removed.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>REQUIRED. A Subject claim identifying the subject to be removed.</t>
  </dd>
</dl>

<t>On a successful response, the Event Transmitter responds with a <spanx style="verb">204 No Content</spanx>
response.</t>

<t>The following is a non-normative example request where the subject is
identified by a Phone Number Subject Identifier:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><sourcecode type="http"><![CDATA[
POST /sse/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
            
{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "subject": {
    "format": "phone",
    "phone_number": "+12065550123"
  }
}             
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject, or not allowed to remove in general</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the subject is not recognized by the Event Transmitter. The Event Transmitter may choose to stay silent in this second case and respond with <spanx style="verb">204</spanx></c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time</c>
</texttable>

</section>
</section>
<section anchor="verification"><name>Verification</name>
<t>In some cases, the frequency of event transmission on an Event Stream will be
very low, making it difficult for an Event Receiver to tell the difference
between expected behavior and event transmission failure due to a misconfigured
stream. Event Receivers can request that a verification event be transmitted
over the Event Stream, allowing the receiver to confirm that the stream is
configured correctly upon successful receipt of the event. The acknowledgment of
a Verification Event also confirms to the Event Transmitter that end-to-end
delivery is working, including signature verification and encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one was
not requested by the Event Receiver.</t>

</section>
<section anchor="verification-event"><name>Verification Event</name>
<t>The Verification Event is a standard SET with the following attributes:</t>

<dl>
  <dt>event type</dt>
  <dd>
    <t>The Event Type URI is: <spanx style="verb">https://schemas.openid.net/secevent/sse/event-type/verification</spanx>.</t>
  </dd>
  <dt>state</dt>
  <dd>
    <t>OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
  </dd>
</dl>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET and
validate its claims. In particular, the Event Receiver SHALL confirm that the
value for <spanx style="verb">state</spanx> is as expected. If the value of <spanx style="verb">state</spanx> does not match, an
error response of <spanx style="verb">setData</spanx> SHOULD be returned (see Section 2.3 of
<xref target="DELIVERYPUSH"/> or <xref target="DELIVERYPOLL"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event Stream that
fails to successfully verify based on the acknowledgement or lack of
acknowledgement by the Event Receiver.</t>

<section anchor="triggering-a-verification-event"><name>Triggering a Verification Event.</name>
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a <xref target="RFC7159">JSON</xref> object containing the parameters of the verification request, if any.
On a successful request, the event transmitter responds with an empty
<spanx style="verb">204 No Content</spanx> response.</t>

<t>Verification requests have the following properties:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream that the verification event is being requested on.</t>
  </dd>
  <dt>state</dt>
  <dd>
    <t>OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to the
Event Receiver in the verification event&#39;s payload. Event Receivers MAY use
the value of this parameter to correlate a verification event with a
verification request. If the verification event is initiated by the transmitter
then this parameter MUST not be set.</t>
  </dd>
</dl>

<t>A successful response from a POST to the Verification Endpoint does not indicate
that the verification event was transmitted successfully, only that the Event
Transmitter has transmitted the event or will do so at some point in the future.
Event Transmitters MAY transmit the event via an asynchronous process, and SHOULD
publish an SLA for verification event transmission times. Event Receivers MUST NOT
depend on the verification event being transmitted synchronously or in any
particular order relative to the current queue of events.</t>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time; see related <spanx style="verb">min_verification_interval</spanx> in <xref target="stream-config"/></c>
</texttable>

<t>The following is a non-normative example request to trigger a verification event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><sourcecode type="http"><![CDATA[
POST /sse/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>And the following is a non-normative example of a verification event sent to the
Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": 1493856000,
  "events": {
    "https://schemas.openid.net/secevent/sse/event-type/verification":{
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="stream-updated-event"><name>Stream Updated Event</name>
<t>A Transmitter MAY change the stream status in reference to one or more Subjects
without a request from a Receiver. The Transmitter sends an event of type
<spanx style="verb">https://schemas.openid.net/secevent/sse/event-type/stream-updated</spanx> to indicate
that it has changed the status of the Event Stream for a specific Subject.</t>

<t>If a Transmitter decides to change the status of an Event Stream from <spanx style="verb">enabled</spanx>
to either <spanx style="verb">paused</spanx> or <spanx style="verb">disabled</spanx>, then the Transmitter MUST send this event to
any Receiver that is currently <spanx style="verb">enabled</spanx> to receive events from this stream.</t>

<t>If the Transmitter changes the status of the stream for a Subject from either
<spanx style="verb">paused</spanx> or <spanx style="verb">disabled</spanx> to <spanx style="verb">enabled</spanx>, then it MUST send this event to any
Receiver that has previously been enabled to receive events for the specified
Subject.</t>

<t>The <spanx style="verb">stream-updated</spanx> event MAY contain the following claims:</t>

<dl>
  <dt>status</dt>
  <dd>
    <t>REQUIRED. Defines the new status of the stream for the Subject Identifier
specified in the Subject.</t>
  </dd>
  <dt>reason</dt>
  <dd>
    <t>OPTIONAL. Provides a short description of why the Transmitter has updated the
status.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>OPTIONAL. Specifies the Subject Principal for whom the status has been updated.
If this claim is not included, then the status change was applied to all
subjects in the stream.</t>
  </dd>
</dl>

<figure title="Example: Stream Updated SET" anchor="figstreamupdatedset"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": 1493856000,
  "events": {
    "https://schemas.openid.net/secevent/sse/event-type/stream-updated": {
      "subject": {
        "tenant" : {
          "format": "iss_sub",
          "iss" : "http://example.com/idp1",
          "sub" : "1234"
        }    
      },   
      "status": "paused",
      "reason": "License is not valid"
    }   
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="management-api-auth"><name>Authorization</name>
<t>HTTP API calls from a Receiver to a Transmitter SHOULD be authorized by
providing an OAuth 2.0 Access Token as defined by <xref target="RFC6750"/>.</t>

<t>The receiver may obtain an access token using the <xref target="CLIENTCRED"/> Client
Credential Grant, or any other method suitable for the Receiver and the
Transmitter.</t>

</section>
<section anchor="management-sec"><name>Security Considerations</name>

<section anchor="management-sec-subject-probing"><name>Subject Probing</name>
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A <spanx style="verb">404</spanx> response may indicate
to the Event Receiver that the subject does not exist, which may inadvertently
reveal information about the subject (e.g. that a particular individual does or
does not use the Event Transmitter&#39;s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a <spanx style="verb">204</spanx> response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="management-sec-information-harvesting"><name>Information Harvesting</name>
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="management-sec-malicious-subject-removal"><name>Malicious Subject Removal</name>
<t>A malicious party may find it advantageous to remove a particular subject from a
stream, in order to reduce the Event Receiver&#39;s ability to detect malicious
activity related to the subject, inconvenience the subject, or for other reasons.
Consequently it may be in the best interests of the subject for the Event
Transmitter to continue to send events related to the subject for some time after
the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<section anchor="sub-info-leakage"><name>Subject Information Leakage</name>
<t>Event issuers and recipients SHOULD take precautions to ensure that they do not
leak information about subjects via Subject Identifiers, and choose appropriate
Subject Identifier Types accordingly. Parties SHOULD NOT identify a subject
using a given Subject Identifier Type if doing so will allow the recipient to
correlate different claims about the subject that they are not known to already
have knowledge of. Transmitters and Receivers SHOULD always use the same Subject
Identifier Type and the same claim values to identify a given subject when
communicating with a given party in order to reduce the possibility of
information leakage.</t>

</section>
<section anchor="previously-consented-data"><name>Previously Consented Data</name>
<t>If SSF events contain new values for attributes of Subject Principals that were
previously exchanged between the Transmitter and Receiver, then there are no
additional privacy considerations introduced by providing the updated values in
the SSF events, unless the attribute was exchanged under a one-time consent
obtained from the user.</t>

</section>
<section anchor="new-data"><name>New Data</name>
<t>Data that was not previously exchanged between the Transmitter and the Receiver,
or data whose consent to exchange has expired has the following considerations:</t>

<section anchor="organizational-data"><name>Organizational Data</name>
<t>If a user has previously agreed with a Transmitter that they agree to release
certain data to third-parties, then the Transmitter MAY send such data in SSF
events without additional consent of the user. Such data MAY include
organizational data about the Subject Principal that was generated by the
Transmitter.</t>

</section>
<section anchor="consentable-data"><name>Consentable Data</name>
<t>If a Transmitter intends to include data in SSF events that is not previously
consented to be released by the user, then the Transmitter MUST obtain consent
to release such data from the user in accordance with the Transmitter&#39;s privacy
policy.</t>

</section>
</section>
</section>
<section anchor="profiles"><name>Profiles</name>
<t>This section is a profile of the following IETF SecEvent specifications:</t>

<t><list style="symbols">
  <t><xref target="RFC8417"/> Security Event Token (SET)</t>
  <t><xref target="DELIVERYPUSH"/> Push-Based SET Token Delivery Using HTTP</t>
  <t><xref target="DELIVERYPOLL"/> Poll-Based SET Token Delivery Using HTTP</t>
</list></t>

<t>The RISC use cases that set the requirements are described in <xref target="USECASES"/>
Security Events RISC Use Cases.</t>

<t>The CAEP use cases that set the requirements are described in CAEP Use Cases (TODO: Add
        reference when file is added to repository.)</t>

<section anchor="set-profle"><name>Security Event Token Profile</name>
<t>This section provides SSF profiling specifications for the Security Event Token
<xref target="RFC8417"/> spec.</t>

<section anchor="signature-key-resolution"><name>Signature Key Resolution</name>
<t>The signature key can be obtained through <spanx style="verb">jwks_uri</spanx>, see <xref target="discovery"/>.</t>

</section>
<section anchor="event-subjects"><name>SSF Event Subject</name>
<t>The subject of a SSF event is identified by the <spanx style="verb">subject</spanx> claim within the event
payload, whose value is a Subject Identifier. The <spanx style="verb">subject</spanx> claim is REQUIRED
for all SSF events. The JWT <spanx style="verb">sub</spanx> claim MUST NOT be present in any SET containing
a SSF event.</t>

<section anchor="event-properties"><name>SSF Event Properties</name>
<t>The SSF event MAY contain additional claims within the event payload that are
specific to the event type.</t>

<figure title="Example: SET Containing a RISC Event with a Phone Number Subject" anchor="risc-event-subject-example"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/risc/event-type/account-disabled": {
      "subject": {
        "format": "phone",
        "phone_number": "+1 206 555 0123"
      },
      "reason": "hijacking",
      "cause-time": 1508012752
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a CAEP Event with Properties" anchor="caep-event-properties-example"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-changed": {
      "subject": {
        "format": "email",
        "email": "user@example.com"
      },
      "token": "some-token-value"
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="explicit-typing"><name>Explicit Typing of SETs</name>
<t>SSF events MUST use explicit typing as defined in Section 2.3 of <xref target="RFC8417"/>.</t>

<figure title="Explicitly Typed JOSE Header" anchor="explicit-type-header"><sourcecode type="json"><![CDATA[
{
  "typ":"secevent+jwt",
  "alg":"HS256"
}
]]></sourcecode></figure>

<t>The purpose is defense against confusion with other JWTs, as described in
Sections 4.5, 4.6 and 4.7 of <xref target="RFC8417"/>. While current Id Token <xref target="IDTOKEN"/>
validators may not be using the <spanx style="verb">typ</spanx> header parameter, by requiring it for SSF
SETs a distinct value is guaranteed for future validators.</t>

</section>
<section anchor="exp-claim"><name>The &quot;exp&quot; Claim</name>
<t>The <spanx style="verb">exp</spanx> claim MUST NOT be used in SSF SETs.</t>

<t>The purpose is defense in depth against confusion with other JWTs, as described
in Sections 4.5 and 4.6 of <xref target="RFC8417"/>.</t>

</section>
<section anchor="aud-claim"><name>The &quot;aud&quot; Claim</name>
<t>The <spanx style="verb">aud</spanx> claim can be a single value or an array. Each value SHOULD be the
OAuth 2.0 client ID. Other values that uniquely identifies the Receiver to the
Transmitter MAY be used, if the two parties have agreement on the format.</t>

<t>More than one value can be present if the corresponding Receivers are known to
the Transmitter to be the same entity, for example a web client and a mobile
client of the same application. All the Receivers in this case MUST use the
exact same delivery method.</t>

<t>If multiple Receivers have the exact same delivery configuration but the
Transmitter does not know if they belong to the same entity then the Transmitter
SHOULD issue distinct SETs for each Receiver and deliver them separately. In
this case the multiple Receivers might use the same service to process SETs, and
this service might reroute SETs to respective Receivers, an <spanx style="verb">aud</spanx> claim with
multiple Receivers would lead to unintended data disclosure.</t>

<figure title="Example: SET with array 'aud' claim" anchor="figarrayaud"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": ["receiver.example.com/web", "receiver.example.com/mobile"],
  "iat": 1493856000,
  "events": {
    "https://schemas.openid.net/secevent/sse/event-type/verification": {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="events-claim"><name>The &quot;events&quot; claim</name>
<t>The <spanx style="verb">events</spanx> claim SHOULD contain only one event. Multiple event type URIs are
permitted only if they are alternative URIs defining the exact same event type.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="distinguishing-sets-from-other-kinds-of-jwts"><name>Distinguishing SETs from other Kinds of JWTs</name>
<t>Of particular concern is the possibility that SETs are confused for other kinds
of JWTs. The Security Considerations section of <xref target="RFC8417"/> has several sub-sections
on this subject. The SSF Framework is asking for further restrictions:</t>

<t><list style="symbols">
  <t>The <spanx style="verb">sub</spanx> claim MUST NOT be present, as described in <xref target="event-subjects"/>.</t>
  <t>SSF SETs MUST use explicit typing, as described in <xref target="explicit-typing"/>.</t>
  <t>The <spanx style="verb">exp</spanx> claim MUST NOT be present, as described in <xref target="exp-claim"/>.</t>
</list></t>

</section>
</section>
</section>
<section anchor="set-token-delivery-using-http-profile"><name>SET Token Delivery Using HTTP Profile</name>
<t>This section provides SSF profiling specifications for the <xref target="DELIVERYPUSH"/> and
<xref target="DELIVERYPOLL"/> specs.</t>

<section anchor="delivery-meta"><name>Stream Configuration Metadata</name>
<t>Each delivery method is identified by a URI, specified below by the <spanx style="verb">method</spanx>
metadata.</t>

<section anchor="push-delivery-using-http"><name>Push Delivery using HTTP</name>
<t>This section provides SSF profiling specifications for the <xref target="DELIVERYPUSH"/> spec.</t>

<dl>
  <dt>method</dt>
  <dd>
    <t><spanx style="verb">https://schemas.openid.net/secevent/risc/delivery-method/push</spanx></t>
  </dd>
  <dt>endpoint_url</dt>
  <dd>
    <t>The URL where events are pushed through HTTP POST. This is set by the
Receiver. If a Reciever is using multiple streams from a single Transmitter
and needs to keep the SETs separated, it is RECOMMENDED that the URL for each
stream be unique.</t>
  </dd>
  <dt>authorization_header</dt>
  <dd>
    <t>The HTTP Authorization header that the Transmitter MUST set with each event
delivery, if the configuration is present. The value is optional and it is set
by the Receiver.</t>
  </dd>
</dl>

</section>
<section anchor="polling-delivery-using-http"><name>Polling Delivery using HTTP</name>
<t>This section provides SSF profiling specifications for the <xref target="DELIVERYPOLL"/> spec.</t>

<dl>
  <dt>method</dt>
  <dd>
    <t><spanx style="verb">https://schemas.openid.net/secevent/risc/delivery-method/poll</spanx></t>
  </dd>
  <dt>endpoint_url</dt>
  <dd>
    <t>The URL where events can be retrieved from. This is specified by the
Transmitter. These URLs MAY be reused across Receivers, but MUST be unique per
stream for a given Receiver.</t>
  </dd>
</dl>

</section>
</section>
</section>
</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>
<t>Subject Identifiers defined in this document will be added to the &quot;Security
Events Subject Identifier Types&quot; registry. This registry is defined in the
Subject Identifiers for Security Event Tokens <xref target="SUBIDS"/> specification.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

<reference anchor="CLIENTCRED" target="https://tools.ietf.org/html/rfc6749#section-4.4">
  <front>
    <title>The OAuth 2.0 Authorization Framework - Client Credentials Grant</title>
    <author initials="D." surname="Hardt" fullname="D. Hardt">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
  <seriesInfo name="DOI" value="10.17487/RFC6749"/>
  <seriesInfo name="RFC" value="6749"/>
</reference>
<reference anchor="DELIVERYPOLL" target="https://www.rfc-editor.org/info/rfc8936">
  <front>
    <title>Poll-Based SET Token Delivery Using HTTP</title>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="M. S." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization></organization>
    </author>
    <date year="2020" month="November"/>
  </front>
</reference>
<reference anchor="DELIVERYPUSH" target="https://www.rfc-editor.org/info/rfc8935">
  <front>
    <title>Push-Based SET Token Delivery Using HTTP</title>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization></organization>
    </author>
    <author initials="M. S." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization></organization>
    </author>
    <date year="2020" month="November"/>
  </front>
</reference>
<reference anchor="IDTOKEN" target="http://openid.net/specs/openid-connect-core-1_0.html#IDToken">
  <front>
    <title>OpenID Connect Core 1.0 - ID Token</title>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization></organization>
    </author>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros" fullname="Breno de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore" fullname="Chuck Mortimore">
      <organization></organization>
    </author>
    <date year="2017" month="April"/>
  </front>
</reference>
&OASIS.saml-core-2.0-os;
<reference anchor="OAUTH-DISCOVERY" target="https://www.rfc-editor.org/info/rfc8414">
  <front>
    <title>OAuth 2.0 Authorization Server Metadata - Version 10</title>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
    </author>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization>Nomura Research Institute, Ltd.</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Ping Identity</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
</reference>
<reference anchor="OPENID-DISCOVERY" target="https://openid.net/specs/openid-connect-discovery-1_0.html">
  <front>
    <title>OpenID Connect Discovery 1.0</title>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization>Nomura Research Institute, Ltd.</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Ping Identity</organization>
    </author>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
    </author>
    <author initials="E." surname="Jay" fullname="Edmund Jay">
      <organization>Illumila</organization>
    </author>
    <date year="2014" month="November"/>
  </front>
</reference>
&RFC2119;
&RFC5785;
&RFC6750;
&RFC7159;
&RFC7517;
&RFC7519;
&RFC8174;
&RFC8417;
<reference anchor="SUBIDS" target="https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers">
  <front>
    <title>Subject Identifiers for Security Event Tokens</title>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <date year="2021" month="May"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="CAEP" target="https://cloud.google.com/blog/products/identity-security/re-thinking-federated-identity-with-the-continuous-access-evaluation-protocol">
  <front>
    <title>Re-thinking Federated Identity with the Continuous Access Evaluation Protocol</title>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization>Google</organization>
    </author>
    <date year="2019" month="February"/>
  </front>
</reference>
<reference anchor="USECASES" target="https://tools.ietf.org/html/draft-scurtescu-secevent-risc-use-cases-00">
  <front>
    <title>Security Events RISC Use Cases</title>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <date year="2017" month="June"/>
  </front>
</reference>


    </references>


<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>The authors wish to thank all members of the OpenID Foundation Shared Signals
and Events Working Group who contributed to the development of this
specification.</t>

</section>
<section anchor="notices"><name>Notices</name>

<t>Copyright (c) 2021 The OpenID Foundation.</t>

<t>The OpenID Foundation (OIDF) grants to any Contributor, developer, implementer, or other interested party a non-exclusive, royalty free, worldwide copyright license to reproduce, prepare derivative works from, distribute, perform and display, this Implementers Draft or Final Specification solely for the purposes of (i) developing specifications, and (ii) implementing Implementers Drafts and Final Specifications based on such documents, provided that attribution be made to the OIDF as the source of the material, but that such attribution does not indicate an endorsement by the OIDF.</t>

<t>The technology described in this specification was made available from contributions from various sources, including members of the OpenID Foundation and others. Although the OpenID Foundation has taken steps to help ensure that the technology is available for distribution, it takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this specification or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any independent effort to identify any such rights. The OpenID Foundation and the contributors to this specification make no (and hereby expressly disclaim any) warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to this specification, and the entire risk as to implementing this specification is assumed by the implementer. The OpenID Intellectual Property Rights policy requires contributors to offer a patent promise not to assert certain patent claims against other contributors and against implementers. The OpenID Foundation invites any interested party to bring to its attention any copyrights, patents, patent applications, or other proprietary rights that may cover technology that may be required to practice this specification.</t>

</section>


  </back>

<!-- ##markdown-source:
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
qpaz6wX/HwvbdNUxMQEA

-->

</rfc>

