<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY OASIS.saml-core-2.0-os SYSTEM "https://bib.ietf.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml">
<!ENTITY RFC2119 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5785 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY RFC6750 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC7159 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7517 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7519 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC8174 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8417 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8417.xml">
]>

<?rfc private="yes"?>

<rfc ipr="none" docName="openid-sharedsignals-framework-1_0" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SharedSignals">OpenID Shared Signals Framework - draft 03</title>

    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization>SGNL</organization>
      <address>
        <email>atul@sgnl.ai</email>
      </address>
    </author>
    <author initials="T." surname="Cappalli" fullname="Tim Cappalli">
      <organization>Microsoft</organization>
      <address>
        <email>tim.cappalli@microsoft.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Coinbase</organization>
      <address>
        <email>marius.scurtescu@coinbase.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
      <address>
        <email>secevemt@ve7jtb.com</email>
      </address>
    </author>
    <author initials="S." surname="Miel" fullname="Shayne Miel">
      <organization>Cisco</organization>
      <address>
        <email>smiel@cisco.com</email>
      </address>
    </author>

    <date year="2023" month="January" day="18"/>

    
    <workgroup>Shared Signals</workgroup>
    

    <abstract>


<t>This Shared Signals and Events (SSE) Framework enables sharing of signals and events
between cooperating peers. It enables multiple applications such as Risk Incident Sharing
and Coordination (RISC) and the Continuous Access Evaluation Profile ( <xref target="CAEP"/> )</t>

<t>This specification defines:</t>

<t><list style="symbols">
  <t>A profile for <xref target="RFC8417"/> (Security Event Tokens)</t>
  <t>Subject Principals</t>
  <t>A profile for <xref target="SUBIDS"/> (Subject Identifiers for Security Event Tokens)</t>
  <t>Configuration information and discovery method for Transmitters</t>
  <t>A Management API for Event Streams</t>
  <t>A profile for <xref target="DELIVERYPUSH"/> (Push-Based SET Token Delivery Using HTTP)</t>
  <t>A profile for <xref target="DELIVERYPOLL"/> (Poll-Based Security Event Token (SET) Delivery Using HTTP)</t>
  <t>Event Types</t>
  <t>Event Properties</t>
</list></t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>The OpenID Shared Signals Framework (SSF) defines how independent parties can:</t>

<t><list style="symbols">
  <t>Create streams of events between a Transmitter and a Receiver</t>
  <t>Describe the types of supported events and desired events</t>
  <t>Control the flow within a stream</t>
  <t>Asynchronously send and receive events</t>
  <t>Verify the liveness of a stream</t>
  <t>Describe the subject within an event</t>
  <t>Describe the format of events</t>
</list></t>

<t>The events in SSF streams are always Security Event Tokens (SETs) <xref target="RFC8417"/>,
and are delivered using HTTP PUSH <xref target="DELIVERYPUSH"/> or HTTP POLL <xref target="DELIVERYPOLL"/>
mechanisms</t>

<section anchor="notational-considerations"><name>Notational Considerations</name>

<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="subject-principals"><name>Subject Principals</name>

<t>This Shared Signals Framework specification defines a Subject Principal to be
the entities about which event can be sent by Transmitters and received by
Receivers using the Shared Signals Framework.</t>

<t>Subject Principals are the managed entities in a SSF Transmitter or Receiver.
These include human or robotic principals, devices, customer tenants in a
multi-tenanted service, organizational units within a tenant, groups of subject
principals, or other entities that are managed by Transmitters and Receivers.
There may be other actors or resources that can be treated as Subject
Principals, and event-type definitions SHOULD specify the range of principals
addressed by the event.</t>

<t>Subject Principals are identified by Subject Members defined below.</t>

</section>
<section anchor="subject-ids"><name>Subject Members in SSF Events</name>

<t>A member of type Subject in an SSF event MAY have any claim name. Each Subject Member MUST
refer to exactly one Subject Principal.</t>

<t>A Subject may be a <spanx style="verb">simple subject</spanx> or a <spanx style="verb">complex subject</spanx>.</t>

<section anchor="simple-subjects"><name>Simple Subject Members</name>

<t>A Simple Subject Member has a claim name and a value that is a <spanx style="verb">Subject
Identifier</spanx> as defined in the Subject Identifiers for Security Event Tokens
<xref target="SUBIDS"/>. Below is a non-normative example of a Simple Subject Member in a SSE
event.</t>

<figure title="Example: Simple Subject" anchor="simple-subject-ex"><sourcecode type="json"><![CDATA[
"transferer": {
  "format": "email",
  "email": "foo@example.com"
}
]]></sourcecode></figure>

</section>
<section anchor="complex-subjects"><name>Complex Subject Members</name>

<t>A Complex Subject Member has a name and a value that is a JSON <xref target="RFC7159"/>
object that has one or more Simple Subject Members. The name of each Simple
Subject Member in this value MAY be one of the following:</t>

<dl>
  <dt>user</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a user.</t>
  </dd>
  <dt>device</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a device.</t>
  </dd>
  <dt>session</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a session.</t>
  </dd>
  <dt>application</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies an application.</t>
  </dd>
  <dt>tenant</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a tenant.</t>
  </dd>
  <dt>org_unit</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies an organizational unit.</t>
  </dd>
  <dt>group</dt>
  <dd>
    <t>OPTIONAL, a Subject Identifier that identifies a group.</t>
  </dd>
</dl>

<t>Additional Subject Member names MAY be used in Complex Subjects. Each member name MAY
appear at most once in the Complex Subject value.</t>

<t>Below is a non-normative example of a Complex Subject claim in a SSE event.</t>

<figure title="Example: Complex Subject" anchor="complex-subject-ex"><sourcecode type="json"><![CDATA[
"transferee": {
  "user" : {
    "format": "email",
    "email": "bar@example.com"
  },
  "tenant" : {
    "format": "iss_sub",
    "iss" : "http://example.com/idp1",
    "sub" : "1234"
  }
}
]]></sourcecode></figure>

<section anchor="complex-subject-interpretation"><name>Complex Subject Interpretation</name>

<t>All members within a Complex Subject MUST represent attributes of the same
Subject Principal. As a whole, the Complex Subject MUST refer to exactly one
Subject Principal.</t>

</section>
</section>
<section anchor="subject-ids-in-ssf"><name>Subject Identifiers in SSF Events</name>

<t>A Subject Identifier in a SSE event MUST have an identifier format that is any
one of:</t>

<t><list style="symbols">
  <t>Defined in the IANA Registry defined in Subject Identifiers for Security
Event Tokens <xref target="SUBIDS"/></t>
  <t>An identifier format defined in the Additional Subject Identifier Formats
<xref target="additional-subject-id-formats"/> section below, OR</t>
  <t>A proprietary subject identifier format that is agreed to between parties.
Members within a subject identifier that has a proprietary subject identifier
format are agreed to between the parties and such agreement is outside the
scope of this specification.</t>
</list></t>

</section>
<section anchor="additional-subject-id-formats"><name>Additional Subject Identifier Formats</name>

<t>The following new subject identifier formats are defined:</t>

<section anchor="sub-id-jwt-id"><name>JWT ID Subject Identifier Format</name>

<t>The &quot;JWT ID&quot; Subject Identifier Format specifies a JSON Web Token (JWT)
identifier, defined in  <xref target="RFC7519"/>. Subject Identifiers of this type MUST
contain the following members:</t>

<dl>
  <dt>iss</dt>
  <dd>
    <t>REQUIRED, the &quot;iss&quot; (issuer) claim of the JWT being identified, defined in
<xref target="RFC7519"/></t>
  </dd>
  <dt>jti</dt>
  <dd>
    <t>REQUIRED, the &quot;jti&quot; (JWT token ID) claim of the JWT being identified, defined
in <xref target="RFC7519"/></t>
  </dd>
</dl>

<t>The &quot;JWT ID&quot; Subject Identifier Format is identified by the name <spanx style="verb">jwt-id</spanx></t>

<t>Below is a non-normative example of Subject Identifier for the <spanx style="verb">jwt-id</spanx> Subject
Identifier Format.</t>

<figure title="Example: 'jwt-id' Subject Identifier" anchor="sub-id-jwtid"><sourcecode type="json"><![CDATA[
{
    "format": "jwt-id",
    "iss": "https://idp.example.com/123456789/",
    "jti": "B70BA622-9515-4353-A866-823539EECBC8"
}
]]></sourcecode></figure>

</section>
<section anchor="sub-id-saml-assertion-id"><name>SAML Assertion ID Subject Identifier Format</name>

<t>The &quot;SAML Assertion ID&quot; Subject Identifier Format specifies a SAML 2.0
<xref target="OASIS.saml-core-2.0-os"/> assertion identifier. Subject Identifiers of this
format MUST contain the following members:</t>

<dl>
  <dt>issuer</dt>
  <dd>
    <t>REQUIRED, the &quot;Issuer&quot; value of the SAML assertion being identified, defined
in <xref target="OASIS.saml-core-2.0-os"/></t>
  </dd>
  <dt>assertion_id</dt>
  <dd>
    <t>REQUIRED. The &quot;ID&quot; value of the SAML assertion being identified, defined in
<xref target="OASIS.saml-core-2.0-os"/></t>
  </dd>
</dl>

<t>The &quot;SAML Assertion ID&quot; Subject Identifier Format is identified by the name
<spanx style="verb">saml_assertion_id</spanx></t>

<t>Below is a non-normative example Subject Identifier for the <spanx style="verb">saml_assertion_id</spanx>
Subject Identifier Format.</t>

<figure title="Example: 'saml_assertion_id' Subject Identifier" anchor="sub-id-samlassertionid"><sourcecode type="json"><![CDATA[
{
    "format": "saml_assertion_id",
    "issuer": "https://idp.example.com/123456789/",
    "assertion_id": "_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6"
}

]]></sourcecode></figure>

</section>
</section>
<section anchor="receiver-subject-processing"><name>Receiver Subject Processing</name>

<t>A SSE Receiver MUST make a best effort to process all members from a Subject in
an SSE event. The Transmitter Configuration Metadata <xref target="discovery-meta"/> defined
below MAY define certain members within a Complex Subject to be Critical. A SSE
Receiver MUST discard any event that contains a Subject with a Critical member
that it is unable to process.</t>

</section>
</section>
<section anchor="properties"><name>Event Properties</name>

<t>Additional members about an event may be included in the <spanx style="verb">events</spanx> claim. Some
of these members are required and specified as such in the respective event
types specs. If a Transmitter determines that it needs to include additional
members that are not specified in the event types spec, then the name of such
members MUST be a URI. The discoverability of all additional members is 
specified in the Discovery <xref target="discovery"/> section.</t>

</section>
<section anchor="events-examples"><name>Example SETs that conform to the SSE framework</name>

<t>The following are hypothetical examples of SETs that conform to the SSE framework.</t>

<figure title="Example: SET Containing a SSE Event with a Simple Subject Member" anchor="subject-ids-ex-simple"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/risc/event-type/account-enabled": {
      "subject": {
        "format": "email",
        "email": "foo@example.com"
      }
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a SSE Event with a Complex Subject Member" anchor="subject-ids-ex-complex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/session-revoked": {
      "subject": {
          "user": {
              "format": "iss_sub",
              "iss": "https://idp.example.com/3957ea72-1b66-44d6-a044-d805712b9288/",
              "sub": "jane.smith@example.com"
          },
          "device": {
              "format": "iss_sub",
              "iss": "https://idp.example.com/3957ea72-1b66-44d6-a044-d805712b9288/",
              "sub": "e9297990-14d2-42ec-a4a9-4036db86509a"
          }
      },
      "initiating_entity": "policy",
      "reason_admin": "Policy Violation: C076E82F",
      "reason_user": "Landspeed violation.",
      "event_timestamp": 1600975810
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a SSE Event with a Simple Subject and a Property Member" anchor="subject-properties-ex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://sp.example2.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
      "subject": {
        "format": "email",
        "email": "foo@example2.com"
      },
      "event_timestamp": 1600975810,
      "claims": {
         "role": "ro-admin"
      }
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a SSE Event with a Proprietary Subject Identifier Format" anchor="subject-custom-type-ex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://myservice.example3.com/",
  "jti": "756E69717565206964656E746966696534",
  "iat": 15203800012,
  "aud": "636C69656E745F6324",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
    "subject": {
        "format": "catalog_item",
        "catalog_id": "c0384/winter/2354122"
      },
      "event_timestamp": 1600975810,
      "claims": {
         "role": "ro-admin"
      }
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="discovery"><name>Transmitter Configuration Discovery</name>

<t>This section defines a mechanism for Receivers to obtain Transmitter
configuration information.</t>

<section anchor="discovery-meta"><name>Transmitter Configuration Metadata</name>

<t>Transmitters have metadata describing their configuration:</t>

<dl>
  <dt>issuer</dt>
  <dd>
    <t>REQUIRED, the URL using the https scheme with no query or fragment component
that the Transmitter asserts as its Issuer Identifier. This MUST be identical
to the iss claim value in Security Event Tokens issued from this Transmitter.</t>
  </dd>
  <dt>jwks_uri</dt>
  <dd>
    <t>REQUIRED, the URL of the Transmitter&#39;s JSON Web Key Set <xref target="RFC7517"/> document.
This contains the signing key(s) the Receiver uses to validate signatures from
the Transmitter.</t>
  </dd>
  <dt>delivery_methods_supported</dt>
  <dd>
    <t>RECOMMENDED, a list of supported delivery method URIs.</t>
  </dd>
  <dt>configuration_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Configuration Endpoint.</t>
  </dd>
  <dt>status_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Status Endpoint.</t>
  </dd>
  <dt>add_subject_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Add Subject Endpoint.</t>
  </dd>
  <dt>remove_subject_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Remove Subject Endpoint.</t>
  </dd>
  <dt>verification_endpoint</dt>
  <dd>
    <t>OPTIONAL, the URL of the Verification Endpoint.</t>
  </dd>
  <dt>critical_subject_members</dt>
  <dd>
    <t>OPTIONAL, the list of member names in a Complex Subject which, if present in
a Subject Member in an event, MUST be interpreted by a Receiver.</t>
  </dd>
</dl>

<t>TODO: consider adding a IANA Registry for metadata, similar to Section 7.1.1 of
<xref target="OAUTH-DISCOVERY"/>. This would allow other specs to add to the metadata.</t>

</section>
<section anchor="obtaining-transmitter-configuration-information"><name>Obtaining Transmitter Configuration Information</name>

<t>Using the Issuer as documented by the Transmitter, the Transmitter Configuration
Information can be retrieved.</t>

<t>Transmitters supporting Discovery MUST make a JSON document available at the
path formed by inserting the string <spanx style="verb">/.well-known/ssf-configuration</spanx> into the
Issuer between the host component and the path component, if any. The syntax
and semantics of <spanx style="verb">.well-known</spanx> are defined in <xref target="RFC5785"/>.  <spanx style="verb">ssf-configuration</spanx>
MUST point to a JSON document compliant with this specification and MUST be
returned using the <spanx style="verb">application/json</spanx> content type.</t>

<section anchor="transmitter-configuration-request"><name>Transmitter Configuration Request</name>

<t>A Transmitter Configuration Document MUST be queried using an HTTP <spanx style="verb">GET</spanx> request
at the previously specified path.</t>

<t>The Receiver would make the following request to the Issuer
<spanx style="verb">https://tr.example.com</spanx> to obtain its Configuration information, since the
Issuer contains no path component:</t>

<figure title="Example: Transmitter Configuration Request (without path)" anchor="figdiscoveryrequest"><sourcecode type="http"><![CDATA[
GET /.well-known/ssf-configuration HTTP/1.1
Host: tr.example.com
]]></sourcecode></figure>

<t>If the  Issuer value contains a path component, any terminating <spanx style="verb">/</spanx> MUST be
removed before inserting <spanx style="verb">/.well-known/ssf-configuration</spanx> between the host
component and the path component. The Receiver would make the following request
to the Issuer <spanx style="verb">https://tr.example.com/issuer1</spanx> to obtain its Configuration
information, since the Issuer contains a path component:</t>

<figure title="Example: Transmitter Configuration Request (with path)" anchor="figdiscoveryrequestpath"><sourcecode type="http"><![CDATA[
GET /.well-known/ssf-configuration/issuer1 HTTP/1.1
Host: tr.example.com
]]></sourcecode></figure>

<t>Using path components enables supporting multiple issuers per host. This is
required in some multi-tenant hosting configurations. This use of <spanx style="verb">.well-known</spanx>
is for supporting multiple issuers per host; unlike its use in <xref target="RFC5785"/>, it
does not provide general information about the host.</t>

</section>
<section anchor="backward-compatibility-for-risc-transmitters"><name>Backward Compatibility for RISC Transmitters</name>
<t>Existing RISC Transmitters MAY continue to use the path component
<spanx style="verb">/risc-configuration</spanx> instead of the path component <spanx style="verb">/ssf-configuration</spanx> in the
path for the Transmitter Configuration Metadata. New services supporting the
Shared Signals Framework SHOULD NOT use this location for publishing the
Transmitter Configuration Metadata. For example, the Transmitter Configuration
Metadata for the Transmitter <spanx style="verb">https://risc-tr.example.com</spanx> MAY be obtained by
making the following request:</t>

<figure title="Example: Transmitter Configuration Request for RISC Transmitters" anchor="figolddiscoveryrequest"><sourcecode type="http"><![CDATA[
GET /.well-known/risc-configuration HTTP/1.1
Host: risc-tr.example.com
]]></sourcecode></figure>

</section>
<section anchor="transmitter-configuration-response"><name>Transmitter Configuration Response</name>
<t>The response is a set of Claims about the Transmitter&#39;s configuration, including
all necessary endpoints and public key location information. A successful
response MUST use the 200 OK HTTP status code and return a JSON object using the
<spanx style="verb">application/json</spanx> content type that contains a set of Claims as its members
that are a subset of the Metadata values defined in <xref target="discovery-meta"/>. Other
Claims MAY also be returned.</t>

<t>Claims that return multiple values are represented as JSON arrays. Claims with
zero elements MUST be omitted from the response.</t>

<t>An error response uses the applicable HTTP status code value.</t>

<figure title="Example: Transmitter Configuration Response" anchor="figdiscoveryresponse"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "issuer":
    "https://tr.example.com",
  "jwks_uri":
    "https://tr.example.com/jwks.json",
  "delivery_methods_supported": [
    "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "https://schemas.openid.net/secevent/risc/delivery-method/poll"],
  "configuration_endpoint":
    "https://tr.example.com/sse/mgmt/stream",
  "status_endpoint":
    "https://tr.example.com/sse/mgmt/status",
  "add_subject_endpoint":
    "https://tr.example.com/sse/mgmt/subject:add",
  "remove_subject_endpoint":
    "https://tr.example.com/sse/mgmt/subject:remove",
  "verification_endpoint":
    "https://tr.example.com/sse/mgmt/verification",
  "critical_subject_members": [ "tenant", "user" ]
}
]]></sourcecode></figure>

</section>
<section anchor="transmitter-configuration-validation"><name>Transmitter Configuration Validation</name>
<t>If any of the validation procedures defined in this specification fail, any
operations requiring the information that failed to correctly validate MUST be
aborted and the information that failed to validate MUST NOT be used.</t>

<t>The <spanx style="verb">issuer</spanx> value returned MUST be identical to the Issuer URL that was
directly used to retrieve the configuration information. This MUST also be
identical to the <spanx style="verb">iss</spanx> Claim value in Security Event Tokens issued from this
Transmitter.</t>

</section>
</section>
</section>
<section anchor="management"><name>Management API for SET Event Streams</name>
<t>An Event Stream is an abstraction for how events are communicated from a
Transmitter to a Receiver. The Event Stream&#39;s configuration, which is jointly
managed by the Transmitter and Receiver, holds information about
what types of events will be sent from the Transmitter, as well as the mechanism by
which the Receiver can expect to receive the events. The Event Stream also keeps
track of what Subjects are of interest to the Receiver, and only events with those
Subjects are transmitted on the stream.</t>

<t>This section defines an HTTP API to be implemented by Event Transmitters
which can be used by Event Receivers to create and delete one or more Event Streams.
The API can also be used to query and update the Event Stream&#39;s configuration and status,
add and remove Subjects, and trigger verification for those streams.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Stream Updated |            |
|            +---------------->            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>It is OPTIONAL for Transmitters to implement a Management API, but it is
RECOMMENDED that they implement it, especially the endpoints for querying the
Stream Status and for triggering Verification.</t>

<section anchor="management-api"><name>Event Stream Management</name>
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>A Transmitter and Receiver MAY use the same Event Stream for updates about
multiple Subject Principals. The status of the Event Stream MAY be queried
and managed independently for each Subject Principal by Transmitters and
Receivers.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<dl>
  <dt>Configuration Endpoint</dt>
  <dd>
    <t>An endpoint used to create and delete Event Streams, as well as read and
update an Event Stream&#39;s current configuration.</t>
  </dd>
  <dt>Status Endpoint</dt>
  <dd>
    <t>An endpoint used to read and update an Event Stream&#39;s current status.</t>
  </dd>
  <dt>Add Subject Endpoint</dt>
  <dd>
    <t>An endpoint used to add subjects to an Event Stream.</t>
  </dd>
  <dt>Remove Subject Endpoint</dt>
  <dd>
    <t>An endpoint used to remove subjects from an Event Stream.</t>
  </dd>
  <dt>Verification Endpoint</dt>
  <dd>
    <t>An endpoint used to request the Event Transmitter transmit a Verification
Event over an Event Stream.</t>
  </dd>
</dl>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple Event
Receivers, provided that the Event Transmitter has some mechanism through which
they can identify the applicable set of Event Streams for any given request,
e.g. from authentication credentials. The definition of such mechanisms is
outside the scope of this specification.</t>

<section anchor="stream-config"><name>Stream Configuration</name>
<t>An Event Stream&#39;s configuration is a collection of data, provided by both the
Transmitter and the Receiver, that describes the information being sent over
the Event Stream. It is represented as a JSON <xref target="RFC7159"/> object with the
following properties:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, A string that uniquely identifies the stream. Stream
IDs MUST be unique per Reciever.  This value is generated by the Transmitter
when the stream is created.</t>
  </dd>
  <dt>iss</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, A URL using the https scheme with no query or
fragment component that the Transmitter asserts as its Issuer Identifier. This
MUST be identical to the <spanx style="verb">iss</spanx> Claim value in Security Event Tokens issued
from this Transmitter.</t>
  </dd>
  <dt>aud</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, A string or an array of strings containing an
audience claim as defined in JSON Web Token (JWT)<xref target="RFC7519"/> that identifies
the Event Receiver(s) for the Event Stream. This property cannot be updated.
If multiple Receivers are specified then the Transmitter SHOULD know that
these Receivers are the same entity.</t>
  </dd>
  <dt>events_supported</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, An array of URIs identifying the set of events
supported by the Transmitter for this Receiver. If omitted, Event Transmitters
SHOULD make this set available to the Event Receiver via some other means
(e.g. publishing it in online documentation).</t>
  </dd>
  <dt>events_requested</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, An array of URIs identifying the set of events that
the Receiver requested. A Receiver SHOULD request only the events that it
understands and it can act on. This is configurable by the Receiver.</t>
  </dd>
  <dt>events_delivered</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, An array of URIs which is the intersection of
<spanx style="verb">events_supported</spanx> and <spanx style="verb">events_requested</spanx>. These events MAY be delivered over
            the Event Stream.</t>
  </dd>
  <dt>delivery</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, A JSON object containing a set of name/value pairs
specifying configuration parameters for the SET delivery method.  The actual
delivery method is identified by the special key <spanx style="verb">method</spanx> with the value being
a URI as defined in <xref target="delivery-meta"/>.</t>
  </dd>
  <dt>min_verification_interval</dt>
  <dd>
    <t><strong>Transmitter-Supplied</strong>, An integer indicating the minimum amount of time in
seconds that must pass in between verification requests. If an Event Receiver
submits verification requests more frequently than this, the Event Transmitter
MAY respond with a 429 status code. An Event Transmitter SHOULD NOT respond
with a 429 status code if an Event Receiver is not exceeding this frequency.</t>
  </dd>
  <dt>format</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, The Subject Identifier Format that the Receiver wants
for the events. If not set then the Transmitter might decide to use a type
that discloses more information than necessary.</t>
  </dd>
</dl>

<t>TODO: consider adding a IANA Registry for stream configuration metadata, similar
to Section 7.1.1 of <xref target="OAUTH-DISCOVERY"/>. This would allow other specs to add to
the stream configuration.</t>

<section anchor="creating-a-stream"><name>Creating a Stream</name>
<t>In order to communicate events from a Transmitter to a Receiver, a Receiver
MUST first create an Event Stream. An Event Receiver creates a stream by making
an HTTP POST request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a <spanx style="verb">201 Created</spanx> response containing a
<xref target="RFC7159">JSON</xref> representation of the stream&#39;s configuration in the body.</t>

<t>The HTTP POST request MAY contain the Receiver-Supplied values of the Stream
Configuration<xref target="stream-config"/> object:</t>

<dl>
  <dt>events_requested</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, An array of URIs identifying the set of events that
the Receiver requested. A Receiver SHOULD request only the events that it
understands and it can act on. This is configurable by the Receiver.</t>
  </dd>
  <dt>delivery</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, A JSON object containing a set of name/value pairs
specifying configuration parameters for the SET delivery method. The actual
delivery method is identified by the special key <spanx style="verb">method</spanx> with the value
being a URI as defined in <xref target="delivery-meta"/>.</t>
  </dd>
  <dt>format</dt>
  <dd>
    <t><strong>Receiver-Supplied</strong>, The Subject Identifier Format that the Receiver wants
for the events. If not set then the Transmitter might decide to use a type
that discloses more information than necessary.</t>
  </dd>
</dl>

<t>The following is a non-normative example request to create an Event Stream:</t>

<figure title="Example: Create Event Stream Request" anchor="figcreatestreamreq"><sourcecode type="http"><![CDATA[
POST /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
  },
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ]
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Create Stream Response" anchor="figcreatestreamresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
      "http://receiver.example.com/web",
      "http://receiver.example.com/mobile"
    ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Create Stream Errors" anchor="tablecreatestream">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>If the request cannot be parsed</c>
      <c>401</c>
      <c>If authorization failed or it is missing</c>
      <c>403</c>
      <c>If the Event Receiver is not allowed to create a stream</c>
</texttable>

</section>
<section anchor="reading-a-streams-configuration"><name>Reading a Stream&#39;s Configuration</name>
<t>An Event Receiver gets the current configuration of a stream by making an HTTP
GET request to the Configuration Endpoint. On receiving a valid request the
Event Transmitter responds with a <spanx style="verb">200 OK</spanx> response containing a <xref target="RFC7159">JSON</xref>
representation of the stream&#39;s configuration in the body.</t>

<t>The GET request MAY include the &quot;stream_id&quot; as a parameter in order to
identify the correct Event Stream. If the &quot;stream_id&quot; argument is missing,
then the Transmitter MUST return a list of the stream configurations available
to this Receiver. In the event that there are no Event Streams created, the
Transmitter MUST return an empty list.</t>

<t>The following is a non-normative example request to read an Event Stream&#39;s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><sourcecode type="http"><![CDATA[
GET /sse/stream?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
      "http://receiver.example.com/web",
      "http://receiver.example.com/mobile"
    ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>The following is a non-normative example request to read an Event Stream&#39;s
configuration, with no &quot;stream_id&quot; indicated:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreqnostreamid"><sourcecode type="http"><![CDATA[
GET /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no &quot;stream_id&quot;:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigrespnostreamidmanystreams"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[
  {
    "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
    "iss": "https://tr.example.com",
    "aud": [
        "http://receiver.example.com/web",
        "http://receiver.example.com/mobile"
      ],
    "delivery": {
      "delivery_method":
        "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  },
  {
    "stream_id": "50b2d39934264897902c0581ba7c21a3",
    "iss": "https://tr.example.com",
    "aud": [
        "http://receiver.example.com/web",
        "http://receiver.example.com/mobile"
      ],
    "delivery": {
      "delivery_method":
        "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  }
]
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no
&quot;stream_id&quot; when there is only one Event Stream configured:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigrespnostreamidonestream"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[
  {
    "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
    "iss": "https://tr.example.com",
    "aud": [
        "http://receiver.example.com/web",
        "http://receiver.example.com/mobile"
      ],
    "delivery": {
      "delivery_method":
        "https://schemas.openid.net/secevent/risc/delivery-method/push",
      "url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  }
]
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no &quot;stream_id&quot;
when there are no Event Streams configured:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigrespnostreamidnostreams"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[]
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration"><name>Updating a Stream&#39;s Configuration</name>
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP PATCH request to the Configuration Endpoint. The PATCH body contains a
<xref target="RFC7159">JSON</xref> representation of the stream configuration properties to change. On
receiving a valid request the Event Transmitter responds with a <spanx style="verb">200 OK</spanx>
response containing a <xref target="RFC7159">JSON</xref> representation of the entire updated stream
configuration in the body.</t>

<t>The stream_id property MUST be present in the request. Other properties
MAY be present in the request. Any Receiver-Supplied property present in the
request MUST be updated by the Transmitter. Any properties missing in the
request MUST NOT be changed by the Transmitter.</t>

<t>Transmitter-Supplied properties beside the stream_id MAY be present,
but they MUST match the expected value. Missing Transmitter-Supplied
properties will be ignored by the Transmitter.</t>

<t>The following is a non-normative example request to replace an Event Stream&#39;s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><sourcecode type="http"><![CDATA[
PATCH /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "http://receiver.example.com/web",
    "http://receiver.example.com/mobile"
  ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>Pending conditions or errors are signaled with HTTP status codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed, a Transmitter-Supplied property is incorrect, or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="replacing-a-streams-configuration"><name>Replacing a Stream&#39;s Configuration</name>
<t>An Event Receiver replaces the current configuration of a stream by making an
HTTP PUT request to the Configuration Endpoint. The PUT body contains a JSON
<xref target="RFC7159"/> representation of the new configuration. On receiving a valid
request the Event Transmitter responds with a <spanx style="verb">200 OK</spanx> response containing a
JSON <xref target="RFC7159"/> representation of the updated stream configuration in the body.</t>

<t>The stream_id and the full set of Receiver-Supplied properties MUST be present
in the PUT body, not only the ones that are specifically intended to be changed.
Missing Receiver-Supplied properties MUST be interpreted as requested to be
deleted. Event Receivers MAY read the configuration first, modify the JSON
<xref target="RFC7159"/> representation, then make a replacement request.</t>

<t>Transmitter-Supplied properties besides the stream_id MAY be present,
but they MUST match the expected value. Missing Transmitter-Supplied
properties will be ignored by the Transmitter.</t>

<t>The following is a non-normative example request to replace an Event Stream&#39;s
configuration:</t>

<figure title="Example: Replace Stream Configuration Request" anchor="figreplaceconfigreq"><sourcecode type="http"><![CDATA[
PUT /sse/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "http://receiver.example.com/web",
    "http://receiver.example.com/mobile"
  ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Replace Stream Configuration Response" anchor="figreplaceconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "http://receiver.example.com/web",
    "http://receiver.example.com/mobile"
  ],
  "delivery": {
    "delivery_method":
      "https://schemas.openid.net/secevent/risc/delivery-method/push",
    "url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></sourcecode></figure>

<t>Pending conditions or errors are signaled with HTTP status codes as follows:</t>

<texttable title="Replace Stream Configuration Errors" anchor="tabreplaceconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the replace request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed, a Transmitter-Supplied property is incorrect, or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to replace the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="deleting-a-stream"><name>Deleting a Stream</name>
<t>An Event Receiver deletes a stream by making an HTTP DELETE request to the
Configuration Endpoint. On receiving a request the Event Transmitter responds
with an empty <spanx style="verb">204 OK</spanx> response if the configuration was successfully removed.</t>

<t>The DELETE request MUST include the &quot;stream_id&quot; as a parameter in order to
identify the correct Event Stream.</t>

<t>The following is a non-normative example request to delete an Event Stream:</t>

<figure title="Example: Delete Stream Request" anchor="figdeletestreamreq"><sourcecode type="http"><![CDATA[
DELETE /sse/stream?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Delete Stream Errors">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to delete the stream</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
</section>
<section anchor="status"><name>Stream Status</name>
<t>Within an Event Stream, events related to different Subject Principals MAY be
managed independently. A Receiver MAY request Subject Principals to be added to
or removed from a stream by <xref target="updating-a-streams-status"/> and specifying the
Subject in the request.</t>

<t>A Transmitter MAY decide to enable, pause or disable updates about a Subject
independently of an update request from a Receiver. If a Transmitter decides to
start or stop events for a Subject then the Transmitter MUST do the following
according to the status of the stream.</t>

<t>If the stream is:</t>

<dl>
  <dt>Enabled</dt>
  <dd>
    <t>the Transmitter MUST send a <xref target="stream-updated-event"/> event respectively to the
Receiver within the Event Stream.</t>
  </dd>
  <dt>Paused</dt>
  <dd>
    <t>the Transmitter SHOULD send <xref target="stream-updated-event"/> after the Event Stream is
re-started. A Receiver MUST assume that events may have been lost during the
time when the event stream was paused.</t>
  </dd>
  <dt>Disabled</dt>
  <dd>
    <t>the Transmitter MAY send <xref target="stream-updated-event"/> after the Event Stream is
re-enabled.</t>
  </dd>
</dl>

<section anchor="reading-a-streams-status"><name>Reading a Stream&#39;s Status</name>
<t>An Event Receiver checks the current status of an event stream by making an HTTP
GET request to the stream&#39;s Status Endpoint.</t>

<t>The Stream Status method takes the following parameters:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream whose status is being queried.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>OPTIONAL. The subject for which the stream status is requested.</t>
  </dd>
</dl>

<t>On receiving a valid request the Event Transmitter responds with a 200 OK
response containing a <xref target="RFC7159">JSON</xref> object with an attribute<spanx style="verb">status</spanx>,
whose string value MUST have one of the following values:</t>

<dl>
  <dt>enabled</dt>
  <dd>
    <t>The Transmitter MUST transmit events over the stream, according to the
stream&#39;s configured delivery method.</t>
  </dd>
  <dt>paused</dt>
  <dd>
    <t>The Transmitter MUST NOT transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and SHOULD
transmit them when the stream&#39;s status becomes <spanx style="verb">enabled</spanx>. If a Transmitter
holds successive events that affect the same Subject Principal, then the
Transmitter MUST make sure that those events are transmitted in the order of
time that they were generated OR the Transmitter MUST send only the last events
that do not require the previous events affecting the same Subject Principal to
be processed by the Receiver, because the previous events are either cancelled
by the later events or the previous events are outdated.</t>
  </dd>
  <dt>disabled</dt>
  <dd>
    <t>The Transmitter MUST NOT transmit events over the stream, and will not hold
any events for later transmission.</t>
  </dd>
</dl>

<t>The following is a non-normative example request to check an event stream&#39;s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><sourcecode type="http"><![CDATA[
GET /sse/status?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer zzzz
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "status": "enabled"
}
]]></sourcecode></figure>

<t>The following is a non-normative example request to check an event stream&#39;s
status for a specific subject:</t>

<figure title="Example: Check Stream Status Request with Subject" anchor="figstatuswithsubjectreq"><sourcecode type="http"><![CDATA[
GET /sse/status?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f&subject=<url-encoded-subject> HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response with a Subject claim:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatuswithsubjectresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "status": "enabled",
  "subject": {
    "tenant" : {
      "format" : "iss_sub",
      "iss" : "http://example.com/idp1",
      "sub" : "1234"
    }
  }
}
]]></artwork></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Read Stream Status Errors" anchor="tabreadstatus">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream status</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the Subject specified is invalid or if the Receiver is not authorized to get status for the specified Subject.</c>
</texttable>

<t>Examples:</t>

<t><list style="numbers">
  <t>If a Receiver makes a request with an invalid OAuth token, then the
Transmitter MUST respond with a 401 error status.</t>
  <t>If the Receiver presents a valid OAuth token, but the Transmitter policy
does not permit the Receiver from obtaining the status, then the Transmitter
MAY respond with a 403 error status.</t>
  <t>If the Receiver requests the status for a stream that does not exist then the
Transmitter MUST respond with a 404 error status.</t>
  <t>If the Receiver requests the status for a specific Subject, but the
Transmitter policy does not permit the Receiver to read the status of that
Subject, then the Transmitter MAY respond with a 404 error status in order
to not reveal the policy decision.</t>
  <t>If the specified Subject is invalid then the Transmitter MUST respond with a
404 error status.</t>
</list></t>

</section>
<section anchor="updating-a-streams-status"><name>Updating a Stream&#39;s Status</name>
<t>An Event Receiver updates the current status of a stream by making an HTTP POST
request to the Status Endpoint. The POST body contains a <xref target="RFC7159">JSON</xref> object
with the following fields:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream whose status is being updated.</t>
  </dd>
  <dt>status</dt>
  <dd>
    <t>REQUIRED. The new status of the Event Stream.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>OPTIONAL. The Subject to which the new status applies.</t>
  </dd>
  <dt>reason</dt>
  <dd>
    <t>OPTIONAL. A short text description that explains the reason for the change.</t>
  </dd>
</dl>

<t>On receiving a valid request the Event Transmitter responds with a <spanx style="verb">200 OK</spanx>
response containing a <xref target="RFC7159">JSON</xref> representation of the updated stream
status in the body.</t>

<t>The following is a non-normative example request to update an Event Stream&#39;s
status:</t>

<figure title="Example: Update Stream Status Request Without Optional Fields" anchor="figupdatestatusreq"><sourcecode type="http"><![CDATA[
POST /sse/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of an Update Stream Status request with
optional fields:</t>

<figure title="Example: Update Stream Status Request With Optional Fields" anchor="figupdatestatuswithsubjectreq"><sourcecode type="http"><![CDATA[
POST /sse/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "subject": {
    "tenant" : {
      "format" : "iss_sub",
      "iss" : "http://example.com/idp1",
      "sub" : "1234"
    }
  },
  "reason": "Disabled by administrator action."
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Status Response" anchor="figupdatestatusresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "subject": {
    "format" : "email",
    "email" : "user@example.com"
  }
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Update Stream Status Errors" anchor="tabupdatestatus">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream status</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if an invalid Subject is specified.</c>
</texttable>

<t>Example:</t>

<t><list style="numbers">
  <t>If a Receiver makes a request to update a stream to enable it for a specific
Subject, and the Transmitter is unable to decide whether or not to complete
the request, then the Transmitter MUST respond with a 202 status code.</t>
</list></t>

</section>
</section>
<section anchor="subjects"><name>Subjects</name>
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by &quot;adding&quot; or
&quot;removing&quot; that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream"><name>Adding a Subject to a Stream</name>
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a JSON object the
following claims:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream to which the subject is being added.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>REQUIRED. A Subject claim identifying the subject to be added.</t>
  </dd>
  <dt>verified</dt>
  <dd>
    <t>OPTIONAL.  A boolean value; when true, it indicates that the Event Receiver
has verified the Subject claim. When false, it indicates that the Event
Receiver has not verified the Subject claim. If omitted, Event Transmitters
SHOULD assume that the subject has been verified.</t>
  </dd>
</dl>

<t>On a successful response, the Event Transmitter responds with an empty <spanx style="verb">200 OK</spanx>
response.  The Event Transmitter MAY choose to silently ignore the request, for
example if the subject has previously indicated to the Transmitter that they do
not want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty <spanx style="verb">200 OK</spanx> response or an appropriate error code.
See Security Considerations <xref target="management-sec"/>.</t>

<t>The following is a non-normative example request to add a subject to a stream,
where the subject is identified by an Email Subject Identifier.</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><sourcecode type="http"><![CDATA[
POST /sse/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "subject": {
    "format": "email",
    "email": "example.user@example.com"
  },
  "verified": true
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject, or not allowed to add in general</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the subject is not recognized by the Event Transmitter. The Event Transmitter may choose to stay silent in this second case and respond with <spanx style="verb">200</spanx></c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time</c>
</texttable>

</section>
<section anchor="removing-a-subject"><name>Removing a Subject</name>
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP POST
request to the Remove Subject Endpoint, containing in the body a JSON object
with the following claims:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream from which the subject is being removed.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>REQUIRED. A Subject claim identifying the subject to be removed.</t>
  </dd>
</dl>

<t>On a successful response, the Event Transmitter responds with a <spanx style="verb">204 No Content</spanx>
response.</t>

<t>The following is a non-normative example request where the subject is
identified by a Phone Number Subject Identifier:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><sourcecode type="http"><![CDATA[
POST /sse/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
            
{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "subject": {
    "format": "phone",
    "phone_number": "+12065550123"
  }
}             
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject, or not allowed to remove in general</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the subject is not recognized by the Event Transmitter. The Event Transmitter may choose to stay silent in this second case and respond with <spanx style="verb">204</spanx></c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time</c>
</texttable>

</section>
</section>
<section anchor="verification"><name>Verification</name>
<t>In some cases, the frequency of event transmission on an Event Stream will be
very low, making it difficult for an Event Receiver to tell the difference
between expected behavior and event transmission failure due to a misconfigured
stream. Event Receivers can request that a verification event be transmitted
over the Event Stream, allowing the receiver to confirm that the stream is
configured correctly upon successful receipt of the event. The acknowledgment of
a Verification Event also confirms to the Event Transmitter that end-to-end
delivery is working, including signature verification and encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one was
not requested by the Event Receiver.</t>

</section>
<section anchor="verification-event"><name>Verification Event</name>
<t>The Verification Event is a standard SET with the following attributes:</t>

<dl>
  <dt>event type</dt>
  <dd>
    <t>The Event Type URI is: <spanx style="verb">https://schemas.openid.net/secevent/sse/event-type/verification</spanx>.</t>
  </dd>
  <dt>state</dt>
  <dd>
    <t>OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
  </dd>
</dl>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET and
validate its claims. In particular, the Event Receiver SHALL confirm that the
value for <spanx style="verb">state</spanx> is as expected. If the value of <spanx style="verb">state</spanx> does not match, an
error response of <spanx style="verb">setData</spanx> SHOULD be returned (see Section 2.3 of
<xref target="DELIVERYPUSH"/> or <xref target="DELIVERYPOLL"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event Stream that
fails to successfully verify based on the acknowledgement or lack of
acknowledgement by the Event Receiver.</t>

<section anchor="triggering-a-verification-event"><name>Triggering a Verification Event.</name>
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a <xref target="RFC7159">JSON</xref> object containing the parameters of the verification request, if any.
On a successful request, the event transmitter responds with an empty
<spanx style="verb">204 No Content</spanx> response.</t>

<t>Verification requests have the following properties:</t>

<dl>
  <dt>stream_id</dt>
  <dd>
    <t>REQUIRED. The stream that the verification event is being requested on.</t>
  </dd>
  <dt>state</dt>
  <dd>
    <t>OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to the
Event Receiver in the verification event&#39;s payload. Event Receivers MAY use
the value of this parameter to correlate a verification event with a
verification request. If the verification event is initiated by the transmitter
then this parameter MUST not be set.</t>
  </dd>
</dl>

<t>A successful response from a POST to the Verification Endpoint does not indicate
that the verification event was transmitted successfully, only that the Event
Transmitter has transmitted the event or will do so at some point in the future.
Event Transmitters MAY transmit the event via an asynchronous process, and SHOULD
publish an SLA for verification event transmission times. Event Receivers MUST NOT
depend on the verification event being transmitted synchronously or in any
particular order relative to the current queue of events.</t>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time; see related <spanx style="verb">min_verification_interval</spanx> in <xref target="stream-config"/></c>
</texttable>

<t>The following is a non-normative example request to trigger a verification event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><sourcecode type="http"><![CDATA[
POST /sse/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>And the following is a non-normative example of a verification event sent to the
Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": 1493856000,
  "events": {
    "https://schemas.openid.net/secevent/sse/event-type/verification":{
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="stream-updated-event"><name>Stream Updated Event</name>
<t>A Transmitter MAY change the stream status in reference to one or more Subjects
without a request from a Receiver. The Transmitter sends an event of type
<spanx style="verb">https://schemas.openid.net/secevent/sse/event-type/stream-updated</spanx> to indicate
that it has changed the status of the Event Stream for a specific Subject.</t>

<t>If a Transmitter decides to change the status of an Event Stream from <spanx style="verb">enabled</spanx>
to either <spanx style="verb">paused</spanx> or <spanx style="verb">disabled</spanx>, then the Transmitter MUST send this event to
any Receiver that is currently <spanx style="verb">enabled</spanx> to receive events from this stream.</t>

<t>If the Transmitter changes the status of the stream for a Subject from either
<spanx style="verb">paused</spanx> or <spanx style="verb">disabled</spanx> to <spanx style="verb">enabled</spanx>, then it MUST send this event to any
Receiver that has previously been enabled to receive events for the specified
Subject.</t>

<t>The <spanx style="verb">stream-updated</spanx> event MAY contain the following claims:</t>

<dl>
  <dt>status</dt>
  <dd>
    <t>REQUIRED. Defines the new status of the stream for the Subject Identifier
specified in the Subject.</t>
  </dd>
  <dt>reason</dt>
  <dd>
    <t>OPTIONAL. Provides a short description of why the Transmitter has updated the
status.</t>
  </dd>
  <dt>subject</dt>
  <dd>
    <t>OPTIONAL. Specifies the Subject Principal for whom the status has been updated.
If this claim is not included, then the status change was applied to all
subjects in the stream.</t>
  </dd>
</dl>

<figure title="Example: Stream Updated SET" anchor="figstreamupdatedset"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": 1493856000,
  "events": {
    "https://schemas.openid.net/secevent/sse/event-type/stream-updated": {
      "subject": {
        "tenant" : {
          "format": "iss_sub",
          "iss" : "http://example.com/idp1",
          "sub" : "1234"
        }    
      },   
      "status": "paused",
      "reason": "License is not valid"
    }   
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="management-api-auth"><name>Authorization</name>
<t>HTTP API calls from a Receiver to a Transmitter SHOULD be authorized by
providing an OAuth 2.0 Access Token as defined by <xref target="RFC6750"/>.</t>

<t>The receiver may obtain an access token using the <xref target="CLIENTCRED"/> Client
Credential Grant, or any other method suitable for the Receiver and the
Transmitter.</t>

</section>
<section anchor="management-sec"><name>Security Considerations</name>

<section anchor="management-sec-subject-probing"><name>Subject Probing</name>
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A <spanx style="verb">404</spanx> response may indicate
to the Event Receiver that the subject does not exist, which may inadvertently
reveal information about the subject (e.g. that a particular individual does or
does not use the Event Transmitter&#39;s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a <spanx style="verb">204</spanx> response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="management-sec-information-harvesting"><name>Information Harvesting</name>
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="management-sec-malicious-subject-removal"><name>Malicious Subject Removal</name>
<t>A malicious party may find it advantageous to remove a particular subject from a
stream, in order to reduce the Event Receiver&#39;s ability to detect malicious
activity related to the subject, inconvenience the subject, or for other reasons.
Consequently it may be in the best interests of the subject for the Event
Transmitter to continue to send events related to the subject for some time after
the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<section anchor="sub-info-leakage"><name>Subject Information Leakage</name>
<t>Event issuers and recipients SHOULD take precautions to ensure that they do not
leak information about subjects via Subject Identifiers, and choose appropriate
Subject Identifier Types accordingly. Parties SHOULD NOT identify a subject
using a given Subject Identifier Type if doing so will allow the recipient to
correlate different claims about the subject that they are not known to already
have knowledge of. Transmitters and Receivers SHOULD always use the same Subject
Identifier Type and the same claim values to identify a given subject when
communicating with a given party in order to reduce the possibility of
information leakage.</t>

</section>
<section anchor="previously-consented-data"><name>Previously Consented Data</name>
<t>If SSE events contain new values for attributes of Subject Principals that were
previously exchanged between the Transmitter and Receiver, then there are no
additional privacy considerations introduced by providing the updated values in
the SSE events, unless the attribute was exchanged under a one-time consent
obtained from the user.</t>

</section>
<section anchor="new-data"><name>New Data</name>
<t>Data that was not previously exchanged between the Transmitter and the Receiver,
or data whose consent to exchange has expired has the following considerations:</t>

<section anchor="organizational-data"><name>Organizational Data</name>
<t>If a user has previously agreed with a Transmitter that they agree to release
certain data to third-parties, then the Transmitter MAY send such data in SSE
events without additional consent of the user. Such data MAY include
organizational data about the Subject Principal that was generated by the
Transmitter.</t>

</section>
<section anchor="consentable-data"><name>Consentable Data</name>
<t>If a Transmitter intends to include data in SSE events that is not previously
consented to be released by the user, then the Transmitter MUST obtain consent
to release such data from the user in accordance with the Transmitter&#39;s privacy
policy.</t>

</section>
</section>
</section>
<section anchor="profiles"><name>Profiles</name>
<t>This section is a profile of the following IETF SecEvent specifications:</t>

<t><list style="symbols">
  <t><xref target="RFC8417"/> Security Event Token (SET)</t>
  <t><xref target="DELIVERYPUSH"/> Push-Based SET Token Delivery Using HTTP</t>
  <t><xref target="DELIVERYPOLL"/> Poll-Based SET Token Delivery Using HTTP</t>
</list></t>

<t>The RISC use cases that set the requirements are described in <xref target="USECASES"/>
Security Events RISC Use Cases.</t>

<t>The CAEP use cases that set the requirements are described in CAEP Use Cases (TODO: Add
        reference when file is added to repository.)</t>

<section anchor="set-profle"><name>Security Event Token Profile</name>
<t>This section provides SSE profiling specifications for the Security Event Token
<xref target="RFC8417"/> spec.</t>

<section anchor="signature-key-resolution"><name>Signature Key Resolution</name>
<t>The signature key can be obtained through <spanx style="verb">jwks_uri</spanx>, see <xref target="discovery"/>.</t>

</section>
<section anchor="event-subjects"><name>SSE Event Subject</name>
<t>The subject of a SSE event is identified by the <spanx style="verb">subject</spanx> claim within the event
payload, whose value is a Subject Identifier. The <spanx style="verb">subject</spanx> claim is REQUIRED
for all SSE events. The JWT <spanx style="verb">sub</spanx> claim MUST NOT be present in any SET containing
a SSE event.</t>

<section anchor="event-properties"><name>SSE Event Properties</name>
<t>The SSE event MAY contain additional claims within the event payload that are
specific to the event type.</t>

<figure title="Example: SET Containing a RISC Event with a Phone Number Subject" anchor="risc-event-subject-example"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/risc/event-type/account-disabled": {
      "subject": {
        "format": "phone",
        "phone_number": "+1 206 555 0123"
      },
      "reason": "hijacking",
      "cause-time": 1508012752
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a CAEP Event with Properties" anchor="caep-event-properties-example"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "aud": "636C69656E745F6964",
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-changed": {
      "subject": {
        "format": "email",
        "email": "user@example.com"
      },
      "token": "some-token-value"
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="explicit-typing"><name>Explicit Typing of SETs</name>
<t>SSE events MUST use explicit typing as defined in Section 2.3 of <xref target="RFC8417"/>.</t>

<figure title="Explicitly Typed JOSE Header" anchor="explicit-type-header"><sourcecode type="json"><![CDATA[
{
  "typ":"secevent+jwt",
  "alg":"HS256"
}
]]></sourcecode></figure>

<t>The purpose is defense against confusion with other JWTs, as described in
Sections 4.5, 4.6 and 4.7 of <xref target="RFC8417"/>. While current Id Token <xref target="IDTOKEN"/>
validators may not be using the <spanx style="verb">typ</spanx> header parameter, by requiring it for SSE
SETs a distinct value is guaranteed for future validators.</t>

</section>
<section anchor="exp-claim"><name>The &quot;exp&quot; Claim</name>
<t>The <spanx style="verb">exp</spanx> claim MUST NOT be used in SSE SETs.</t>

<t>The purpose is defense in depth against confusion with other JWTs, as described
in Sections 4.5 and 4.6 of <xref target="RFC8417"/>.</t>

</section>
<section anchor="aud-claim"><name>The &quot;aud&quot; Claim</name>
<t>The <spanx style="verb">aud</spanx> claim can be a single value or an array. Each value SHOULD be the
OAuth 2.0 client ID. Other values that uniquely identifies the Receiver to the
Transmitter MAY be used, if the two parties have agreement on the format.</t>

<t>More than one value can be present if the corresponding Receivers are known to
the Transmitter to be the same entity, for example a web client and a mobile
client of the same application. All the Receivers in this case MUST use the
exact same delivery method.</t>

<t>If multiple Receivers have the exact same delivery configuration but the
Transmitter does not know if they belong to the same entity then the Transmitter
SHOULD issue distinct SETs for each Receiver and deliver them separately. In
this case the multiple Receivers might use the same service to process SETs, and
this service might reroute SETs to respective Receivers, an <spanx style="verb">aud</spanx> claim with
multiple Receivers would lead to unintended data disclosure.</t>

<figure title="Example: SET with array 'aud' claim" anchor="figarrayaud"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": ["receiver.example.com/web", "receiver.example.com/mobile"],
  "iat": 1493856000,
  "events": {
    "https://schemas.openid.net/secevent/sse/event-type/verification": {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="events-claim"><name>The &quot;events&quot; claim</name>
<t>The <spanx style="verb">events</spanx> claim SHOULD contain only one event. Multiple event type URIs are
permitted only if they are alternative URIs defining the exact same event type.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="distinguishing-sets-from-other-kinds-of-jwts"><name>Distinguishing SETs from other Kinds of JWTs</name>
<t>Of particular concern is the possibility that SETs are confused for other kinds
of JWTs. The Security Considerations section of <xref target="RFC8417"/> has several sub-sections
on this subject. The SSE Framework is asking for further restrictions:</t>

<t><list style="symbols">
  <t>The <spanx style="verb">sub</spanx> claim MUST NOT be present, as described in <xref target="event-subjects"/>.</t>
  <t>SSE SETs MUST use explicit typing, as described in <xref target="explicit-typing"/>.</t>
  <t>The <spanx style="verb">exp</spanx> claim MUST NOT be present, as described in <xref target="exp-claim"/>.</t>
</list></t>

</section>
</section>
</section>
<section anchor="set-token-delivery-using-http-profile"><name>SET Token Delivery Using HTTP Profile</name>
<t>This section provides SSE profiling specifications for the <xref target="DELIVERYPUSH"/> and
<xref target="DELIVERYPOLL"/> specs.</t>

<section anchor="delivery-meta"><name>Stream Configuration Metadata</name>
<t>Each delivery method is identified by a URI, specified below by the <spanx style="verb">method</spanx>
metadata.</t>

<section anchor="push-delivery-using-http"><name>Push Delivery using HTTP</name>
<t>This section provides SSE profiling specifications for the <xref target="DELIVERYPUSH"/> spec.</t>

<dl>
  <dt>method</dt>
  <dd>
    <t><spanx style="verb">https://schemas.openid.net/secevent/risc/delivery-method/push</spanx></t>
  </dd>
  <dt>endpoint_url</dt>
  <dd>
    <t>The URL where events are pushed through HTTP POST. This is set by the
Receiver. If a Reciever is using multiple streams from a single Transmitter
and needs to keep the SETs separated, it is RECOMMENDED that the URL for each
stream be unique.</t>
  </dd>
  <dt>authorization_header</dt>
  <dd>
    <t>The HTTP Authorization header that the Transmitter MUST set with each event
delivery, if the configuration is present. The value is optional and it is set
by the Receiver.</t>
  </dd>
</dl>

</section>
<section anchor="polling-delivery-using-http"><name>Polling Delivery using HTTP</name>
<t>This section provides SSE profiling specifications for the <xref target="DELIVERYPOLL"/> spec.</t>

<dl>
  <dt>method</dt>
  <dd>
    <t><spanx style="verb">https://schemas.openid.net/secevent/risc/delivery-method/poll</spanx></t>
  </dd>
  <dt>endpoint_url</dt>
  <dd>
    <t>The URL where events can be retrieved from. This is specified by the
Transmitter. These URLs MAY be reused across Receivers, but MUST be unique per
stream for a given Receiver.</t>
  </dd>
</dl>

</section>
</section>
</section>
</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>
<t>Subject Identifiers defined in this document will be added to the &quot;Security
Events Subject Identifier Types&quot; registry. This registry is defined in the
Subject Identifiers for Security Event Tokens <xref target="SUBIDS"/> specification.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

<reference anchor="CLIENTCRED" target="https://tools.ietf.org/html/rfc6749#section-4.4">
  <front>
    <title>The OAuth 2.0 Authorization Framework - Client Credentials Grant</title>
    <author initials="D." surname="Hardt" fullname="D. Hardt">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
  <seriesInfo name="DOI" value="10.17487/RFC6749"/>
  <seriesInfo name="RFC" value="6749"/>
</reference>
<reference anchor="DELIVERYPOLL" target="https://www.rfc-editor.org/info/rfc8936">
  <front>
    <title>Poll-Based SET Token Delivery Using HTTP</title>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="M. S." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization></organization>
    </author>
    <date year="2020" month="November"/>
  </front>
</reference>
<reference anchor="DELIVERYPUSH" target="https://www.rfc-editor.org/info/rfc8935">
  <front>
    <title>Push-Based SET Token Delivery Using HTTP</title>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization></organization>
    </author>
    <author initials="M. S." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization></organization>
    </author>
    <date year="2020" month="November"/>
  </front>
</reference>
<reference anchor="IDTOKEN" target="http://openid.net/specs/openid-connect-core-1_0.html#IDToken">
  <front>
    <title>OpenID Connect Core 1.0 - ID Token</title>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization></organization>
    </author>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros" fullname="Breno de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore" fullname="Chuck Mortimore">
      <organization></organization>
    </author>
    <date year="2017" month="April"/>
  </front>
</reference>
&OASIS.saml-core-2.0-os;
<reference anchor="OAUTH-DISCOVERY" target="https://www.rfc-editor.org/info/rfc8414">
  <front>
    <title>OAuth 2.0 Authorization Server Metadata - Version 10</title>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
    </author>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization>Nomura Research Institute, Ltd.</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Ping Identity</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
</reference>
<reference anchor="OPENID-DISCOVERY" target="https://openid.net/specs/openid-connect-discovery-1_0.html">
  <front>
    <title>OpenID Connect Discovery 1.0</title>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization>Nomura Research Institute, Ltd.</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Ping Identity</organization>
    </author>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
    </author>
    <author initials="E." surname="Jay" fullname="Edmund Jay">
      <organization>Illumila</organization>
    </author>
    <date year="2014" month="November"/>
  </front>
</reference>
&RFC2119;
&RFC5785;
&RFC6750;
&RFC7159;
&RFC7517;
&RFC7519;
&RFC8174;
&RFC8417;
<reference anchor="SUBIDS" target="https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers">
  <front>
    <title>Subject Identifiers for Security Event Tokens</title>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <date year="2021" month="May"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="CAEP" target="https://cloud.google.com/blog/products/identity-security/re-thinking-federated-identity-with-the-continuous-access-evaluation-protocol">
  <front>
    <title>Re-thinking Federated Identity with the Continuous Access Evaluation Protocol</title>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization>Google</organization>
    </author>
    <date year="2019" month="February"/>
  </front>
</reference>
<reference anchor="USECASES" target="https://tools.ietf.org/html/draft-scurtescu-secevent-risc-use-cases-00">
  <front>
    <title>Security Events RISC Use Cases</title>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <date year="2017" month="June"/>
  </front>
</reference>


    </references>


<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>The authors wish to thank all members of the OpenID Foundation Shared Signals
and Events Working Group who contributed to the development of this
specification.</t>

</section>
<section anchor="notices"><name>Notices</name>

<t>Copyright (c) 2021 The OpenID Foundation.</t>

<t>The OpenID Foundation (OIDF) grants to any Contributor, developer, implementer, or other interested party a non-exclusive, royalty free, worldwide copyright license to reproduce, prepare derivative works from, distribute, perform and display, this Implementers Draft or Final Specification solely for the purposes of (i) developing specifications, and (ii) implementing Implementers Drafts and Final Specifications based on such documents, provided that attribution be made to the OIDF as the source of the material, but that such attribution does not indicate an endorsement by the OIDF.</t>

<t>The technology described in this specification was made available from contributions from various sources, including members of the OpenID Foundation and others. Although the OpenID Foundation has taken steps to help ensure that the technology is available for distribution, it takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this specification or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any independent effort to identify any such rights. The OpenID Foundation and the contributors to this specification make no (and hereby expressly disclaim any) warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to this specification, and the entire risk as to implementing this specification is assumed by the implementer. The OpenID Intellectual Property Rights policy requires contributors to offer a patent promise not to assert certain patent claims against other contributors and against implementers. The OpenID Foundation invites any interested party to bring to its attention any copyrights, patents, patent applications, or other proprietary rights that may cover technology that may be required to practice this specification.</t>

</section>


  </back>

<!-- ##markdown-source:
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
X/PNwGRfMDcoMF96qFrOrhf8f8Tjc4EsMQEA

-->

</rfc>

